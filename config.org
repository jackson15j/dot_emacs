#+title: My Literate Emacs Config
#+author: Craig Astill
#+email: craig.astill@gmail.com
#+OPTIONS: num:nil
* Dot Emacs
My main ~.emacs~ file.

** Ansible

Install via [[http://docs.ansible.com/ansible/][ansible]] with the following command, which will prompt for sudo
password (pacman package installation) due to the ~-K~ or ~--ask-become-pass~
flag:

- ~cd ansible/~
- ~ansible-playbook main.yml -K~

You can add ~-i hosts~ if you want to run against remote hosts instead of
locally.

*NOTE:* Hard-coded to ArchLinux and my own needs.

* Core:
** Debugging Emacs:
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
#+END_SRC
*** [[https://github.com/Malabarba/elisp-bug-hunter][Bug-Hunter]]
#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :ensure t)
#+END_SRC

** General
- Don't prompt to kill processes on exit.

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-processes nil)
#+END_SRC

*** Desktop
Auto save all open files in current session and reload on startup.
#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :ensure t
    :init (desktop-save-mode)
    :config
    (progn
      ;; Don't autosave desktops, it's too expensive.  Desktops aren't
      ;; that precious, and Emacs will save the desktop on exit anyway.
      (setq
       desktop-load-locked-desktop t
       desktop-auto-save-timeout nil
       desktop-path '("~/")
       desktop-dirname "~/")
      (dolist (mode '(magit-mode git-commit-mode))
        (add-to-list 'desktop-modes-not-to-save mode))))
#+END_SRC
** Server:
#+BEGIN_SRC emacs-lisp
  (use-package server
    :ensure t
    :config
    ;; https://wiki.archlinux.org/title/Emacs#Multiplexing_emacs_and_emacsclient
    (unless (server-running-p)
      (server-start))
    )
#+END_SRC
** Native Compilation:
Don't load outdated byte code.
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC

[[https://stackoverflow.com/questions/1217180/how-do-i-byte-compile-everything-in-my-emacs-d-directory][SO: How do I byte compile everything?]]
#+BEGIN_SRC emacs-lisp
  ;; (byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
#+END_SRC

Log but don't pop up Warnings buffer for all native compilation warnings.
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent)
#+END_SRC
* Notifications:
** [[https://github.com/jwiegley/alert][alert]]:
#+BEGIN_SRC emacs-lisp
  (use-package alert
    ;; FIXME: is this OS-Specific? Can't remember, so need to double check this
    ;; wont break linux!! Guessing I will need the following line:
    :if (eq system-type 'darwin)
    :ensure-system-package terminal-notifier
    :ensure t
    :commands (alert)
    :init
    (setq
     alert-default-style 'notifier
     alert-fade-time 15
     )
    )
#+END_SRC
** [[https://github.com/spegoraro/org-alert][org-alert]]:
Notifications from scheduled items in the Org Agenda. Builds off: [[*\[\[https://github.com/jwiegley/alert\]\[alert\]\]:][alert]].

*NOTE:* On Mac's I am using an Alert notification for ~terminal-notifier~, so
that notifications have to be explicitly closed.

#+BEGIN_SRC emacs-lisp
  (use-package org-alert
    ;; https://github.com/julienXX/terminal-notifier/issues/292 -  No Notification in macOS12.1 #292
    ;; https://github.com/julienXX/terminal-notifier
    :if (eq system-type 'darwin)
    :ensure-system-package terminal-notifier
    :ensure t
    :after (org)
    :config
    (setq
     alert-default-style 'notifier
     org-alert-notify-cutoff 5
     org-alert-notify-after-event-cutoff 1
     )
    (org-alert-enable)
    )
#+END_SRC
** Custom popup notifications (DEPRECATE!):
Very old way of doing custom notification pop-ups:

- http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html,
  since this would be nicer to move to a standardised package.
#+BEGIN_SRC emacs-lisp
  ;; TODO: figure out why the built in `notifications` package doesn't play
  ;; sounds:
  (defun djcb-popup (title msg &optional timeout icon sound)
    "Show a popup if we're on X, or echo it otherwise;
  TITLE is the title of the message, MSG is the context.
  Optionally, you can provide a TIMEOUT (milliseconds, default=5000) an ICON and
  a SOUND to be played (default=/../alert.wav)"
    (interactive)
    (shell-command
     (concat "mplayer -really-quiet "
             (if sound sound "/usr/share/sounds/purple/alert.wav")
             " 2> /dev/null"))
    ;; Removed `(if (eq window-system 'x)` check since it wasn't doing the
    ;; notify-send on my terminal emacs session nested in tmux in a terminal
    ;; under cinnamon.
    (shell-command (concat "notify-send"
                           (if icon (concat " -i " icon) "")
                           (if timeout (concat " -t " timeout) " -t 5000")
                           " '" title "' '" msg "'"))
    ;; text only version
    (message (concat title ": " msg)))
#+END_SRC

Run example:
#+BEGIN_EXAMPLE emacs-lisp
(djcb-popup "Warning" "The end is near"
            nil
            "/usr/share/icons/gnome/128x128/apps/libreoffice-base.png"
            "/usr/share/sounds/purple/alert.wav")
#+END_EXAMPLE
* Version Control:
VC config ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-VC-Options.html][VC]] is built in version control package. Magit is an enhanced git VC
package).
** Follow symlinks:
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** [[https://magit.vc/][magit]]:
magit - a pretty good git package with more features than the built in emacs
"vc" package.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (
       ("<f3>" . magit-status)
       ("\C-c\C-s" . magit-status)
       ("\C-cg" . vc-git-grep)
       ("\C-cb" . magit-blame))
    :config
    (setq magit-auto-revert-mode t)
    ;; `M-x magit-describe-section-briefly`, then check the square brackets in:
    ;; `<magit-section ... [<section_name> status] ...>`.
    (setq
     magit-section-initial-visibility-alist
     '(
       (stashes . hide)
       (unpulled . show)
       (unpushed . show)
       (pullreqs . show)
       ))
    )
#+END_SRC

** [[https://github.com/emacsorphanage/magit-svn][magit-svn]] (legacy):
Used this years ago when SVN and git-svn where part of my daily work
routine. Haven't needed to touch SVN in years, but keeping here for legacy
reasons.
#+BEGIN_SRC emacs-lisp
  (use-package magit-svn
    :ensure t
    :after magit
    )
#+END_SRC
** [[https://github.com/magit/magit-popup][magit-popup]] (legacy):
https://github.com/magit/magit/issues/3749 ~magit~ moved to using ~transient~
but some packages (~magithub~ -
https://github.com/vermiculus/magithub/issues/402) haven't updated, hence
explicit definition of ~magit-popup~

#+BEGIN_SRC emacs-lisp
  (use-package magit-popup
     :ensure t
     :after magit
     )
#+END_SRC
** [[https://github.com/magit/forge][forge]]:
Builds on top of Magit to interact with VCS's so that you can create/edit
Issues/PR's.

Replacement for [[https://github.com/vermiculus/magithub][magithub]], which works with Gitlab/Github. See old commits for
my old ~magithub~ config.

#+BEGIN_SRC emacs-lisp
  (use-package forge
    ;; https://www.reddit.com/r/emacs/comments/fe165f/pinentry_problems_in_osx/
    ;; to fix GPG timeouts due to no password provided/asked.
    ;; NOTE: for emacsclients, it asks in the main instance window.
    :if (not (eq system-type 'windows-nt))  ;; FIXME: Needs `cc` compiler defined.
    :ensure t
    :after magit
    :config
    (add-to-list 'forge-alist '("git-scm.clinithink.com:2009" "git-scm.clinithink.com/api/v4" "git-scm.clinithink.com" forge-gitlab-repository))
    (add-to-list 'forge-alist '("bitbucket.eigen.live" "bitbucket.eigen.live/rest/api/1.0" "bitbucket.eigen.live" forge-bitbucket-repository))
    (add-to-list 'forge-alist '("gitlab.eigen.live" "gitlab.eigen.live/api/v4" "gitlab.eigen.live" forge-gitlab-repository))
    )
    #+END_SRC
** [[https://github.com/wandersoncferreira/code-review][code-review]]:
Code Review is a package that builds on top of Magit, but supports interacting
with PR's to do code reviews (comments, diff view, approvals, etc).

- ~M-x code-review-forge-pr-at-point~ on forge PR line.
- ~r~ for transient menu in a ~code-review~ buffer.

#+BEGIN_SRC emacs-lisp
  (use-package code-review
    :ensure t
    :after magit
    :config
    (setq
     code-review-bitbucket-host "bitbucket.eigen.live/rest/api/1.0"
     code-review-gitlab-host "gitlab.eigen.live/api"
     code-review-gitlab-graphql-host "gitlab.eigen.live/api"
     ;; Dump requests into the logs for debugging. eg.
     ;; https://github.com/wandersoncferreira/code-review/issues/195.
     ;;
     ;; code-review-log-raw-request-responses t
     )
    )
#+END_SRC

* org:
** macros:
- Convert markdown links (~[display_message](link)~) to org links
  (~[[link][display_message]]~):
  #+BEGIN_SRC emacs-lisp
    (fset 'convert-markdown-link-to-org-link
     "\C-[xreplace-regexp\C-m\\[\\(.*\\)\\](\\(.*\\))\C-m[[\\2][\\1]]\C-m")
 #+END_SRC
** export:
Suggested [[https://orgmode.org/manual/Export-Settings.html][Export Options]] at top of file: ~#+OPTIONS: \n:nil toc:nil num:nil~.

- No line wrapping.
- No TOC.
- Don't number headings.
*** Export org to Confluence:
Been trying different ways to export org files to then dump into
Confluence. Current rating of exporters:

1. Export to HTML.
   - Highlight region.
   - ~M-x org-html-export-as-html~, cursor jumps to export buffer.
   - ~M-x browse-url-of-buffer~, to open in your browser.
   - Select all in Browser tab and paste into Confluence edit mode.
2. Export to ASCII.
   - ~M-x org-ascii-export-as-ascii~.
   - Requires below config changes.
   - Issues around Headings being picked up by Confluence (eg. h3 == h2, no h3+).
   - Issues around Formatting being picked up by Confluence (eg. No Bold markup).
3. Export to Markdown.
   - ~M-x org-md-export-as-markdown~.
   - Great rendering in a ~/markdown~ macro, but other macros cannot be nested
     inside or work with the ~/markdown~ macro. eg. No ~/toc~ macro.
   - Pretty good rendering pasting into Confluence edit area, but no auto
     wrapping. ie. 80 characters.
4. *BROKEN:* ~M-x ox-confluence~ from ~org-contrib~ throws errors on emacs29.

*** Confluence ascii export config:
Better ASCII export output from org files when the target is an Atlassian
Confluence Wiki. Export via: ~M-x org-ascii-export-as-ascii~ (~C-cC-etA~).

*TODO: figure out what Heading underlining style Confluence uses for H3-H5!!*

#+BEGIN_SRC emacs-lisp
  (setq org-ascii-text-width 10000)  ;; Large text width to avoid line wrapping.
  (setq org-ascii-inner-margin 0)  ;; Don't indent lines between headings.
  ;; Confluence expects H2 to be ~-~.
  (setq org-ascii-underline '((ascii 61 45 45)
                              (latin1 61 126 45)
                              (utf-8 9552 9472 9548 9476 9480)))

#+END_SRC

** org-agenda:
*** [[https://orgmode.org/org.html#Repeated-tasks][Repeated tasks]]:
- Tag repeated tasks with a deadline (~C-cC-d~).
- Add the repeat [and reminder] value.
- Mark as done with ~C-cC-t~, which will log that ~DOEN~ and update the
  deadline to the next future point.

#+BEGIN_EXAMPLE emacs-lisp
** TODO example every fortnight task
DEADLINE: <2022-08-01 Mon 09:00-09:15 +2w -3d>
:PROPERTIES:
:LAST_REPEAT: [2022-07-18 Mon 15:35]
:END:
- State "DONE"       from "TODO"       [2022-07-18 Mon 15:35]
- Above ~State~ line is added for each ~C-cC-t~ press!
#+END_SRC
* Docker:
** tramp-container (built-in):
Tramp into a docker container with: ~C-x C-f /docker:[user@]container:/path/to/file~

Originally used: [[https://github.com/emacs-pe/docker-tramp.el][docker-tramp]], but updated to latest Emacs29 (on 2022-10-25)
and now have this warning: ~ ■ Warning (emacs): Package ‘docker-tramp’ has been
obsoleted, please use integrated package ‘tramp-container’ [2 times]~, so
removing for: ~tramp-container~.
* Programming Languages:
** python:
#+BEGIN_SRC emacs-lisp
  ;; FIXME: auto activation blows up when a file has no conda env associated to it.
  ;;
  (when (eq system-type 'darwin)
    ;; FIXME: Bound this to my Work laptop only and not break my personal linux
    ;; laptop when I don't touch conda.
    (use-package conda
      :after (python-mode)
      :ensure t
      :config
      ;; https://github.com/necaris/conda.el/issues/107 - stopped working with
      ;;conda 4.13.0
      ;;
      ;; Brew location for `miniforge`.
      ;; TODO: bound to `darwin`.
      ;; TODO: check all available paths to see which exists or look into ENV variables ??
      (setq conda-anaconda-home (expand-file-name "/opt/homebrew/Caskroom/miniforge/base/"))
      (setq conda-env-home-directory (expand-file-name "/opt/homebrew/Caskroom/miniforge/base/"))
      ;; ;; Web install location for `miniconda`.
      ;; (setq conda-anaconda-home (expand-file-name "~/opt/miniconda3/"))
      ;; (setq conda-env-home-directory (expand-file-name "~/opt/miniconda3/"))
      ;; if you want interactive shell support, include:
      (conda-env-initialize-interactive-shells)
      ;; if you want eshell support, include:
      ;;  (conda-env-initialize-eshell)
      ;;  (defun conda-autoload ()
      ;;    (interactive)
      ;;    "auto activate conda if environment.yml exists."
      ;;    (f-traverse-upwards (lambda (path)
      ;;                          (let ((venv-path (f-expand "environment.yml" path)))
      ;;                            (when (f-exists? venv-path)
      ;;                              (conda-env-activate-for-buffer)
      ;;                              )))))
      ;; NOTE: Using above function to load env for each buffer, instead of the
      ;; global mode, since the global setting below doesn't gracefully handle
      ;; buffers that don't have a conda env.
      ;;
      ;; ;; if you want auto-activation (see below for details), include:
      ;; (conda-env-autoactivate-mode t)
      ;; ;; if you want to automatically activate a conda environment on the opening of a file:
      ;; (add-to-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
      ;;                                           (conda-env-activate-for-buffer))))
      ;; modeline
      ;; (setq-default mode-line-format (cons '(:exec conda-env-current-name) mode-line-format))
      ;; :hook (
      ;;        (python-mode . conda-autoload)
      ;;        )
    )
  )

#+END_SRC

** xml:
*** Pretty print XML:
- [[https://stackoverflow.com/questions/12492/pretty-printing-xml-files-on-emacs][SO: Pretty Printing XML files on Emacs]]. Picked the solution below so that I
  did not have to pull in an OS package.
#+BEGIN_SRC emacs-lisp
  (defun bf-pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n") (setq end (1+ end)))
      (indent-region begin end))
    (message "Ah, much better!"))
#+END_SRC
Usage:
- Past XML into an ~nxml-mode~ buffer.
- To expand single-line XML: Select region or jump to start and call:
  ~bf-pretty-print-xml-region~.
- To indent multi-line XML: Select region and call: ~indent-region~.

* [[https://github.com/skeeto/elfeed][elfeed]]:
RSS feeds in emacs.
** [[https://github.com/skeeto/elfeed][elfeed]]:
An Emacs web feeds client.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :hook (
           (elfeed-show-mode . (lambda () (setq-local shr-width 80)))
           )
    :custom
    (elfeed-use-curl t)
    :config (setq-default word-wrap t)
    ;; (setq elfeed-log-level 'debug)
    )
#+END_SRC
** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]:
Configure the Elfeed RSS reader with an Orgmode file.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (setq
     rmh-elfeed-org-files (list "~/org/personal/elfeed.org")
     )
    :init (elfeed-org)
    )
#+END_SRC
** [[https://github.com/fasheng/elfeed-protocol/][elfeed-protocol]]:
#+BEGIN_SRC emacs-lisp
   (use-package elfeed-protocol
     :after (elfeed elfeed-org)
     :init
     (setq
      elfeed-protocol-update-unread-only t
      )
     (elfeed-protocol-enable)
     :ensure t)

  (defadvice elfeed (after configure-elfeed-feeds activate)
    "Make elfeed-org autotags rules work with elfeed-protocol."
    ;; (setq elfeed-protocol-tags elfeed-feeds)
    ;; ~.authinfo.gpg~ contents: ~machine <ip/hostname> port <port> login <user> password <password>~.
    (setq elfeed-feeds '(("fever+http://craig@192.168.0.98:8095"
                          :api-url "http://craig@192.168.0.98:8095/api/fever.php"
                          :use-authinfo t
                          ;; :autotags elfeed-protocol-tags
                          )))
     )
#+END_SRC
** [[https://github.com/karthink/elfeed-tube][elfeed-tube]]:
Youtube integration for Elfeed, the feed reader for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube
    :ensure t
    :after elfeed
    :demand t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)))
#+END_SRC

If you want “live” captions and better MPV support:

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube-mpv
    :ensure-system-package ((mpv) (yt-dlp))
    :ensure t ;; or :straight t
    :bind (:map elfeed-show-mode-map
                ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                ("C-c C-w" . elfeed-tube-mpv-where)
                ("v" . elfeed-tube-mpv)
                )
    )
#+END_SRC
** [[https://github.com/manojm321/elfeed-dashboard][elfeed-dashboard]]:
A frontend for elfeed (like Mu4e Dashboard).
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-dashboard
    :ensure t
    :config
    (setq elfeed-dashboard-file "~/org/personal/elfeed-dashboard.org")
    ;; update feed counts on elfeed-quit
    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
#+END_SRC
** [[https://github.com/SqrtMinusOne/elfeed-summary][elfeed-summary]]:
Alternative to [[*\[\[https://github.com/manojm321/elfeed-dashboard\]\[elfeed-dashboard\]\]:][elfeed-dashboard]].
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-summary
    :ensure t)
#+END_SRC
# ** [[https://github.com/jeetelongname/elfeed-goodies][elfeed-goodies]]:
# FIXME: Raise bug around missing Powerline version in melpa.
# #+BEGIN_SRC emacs-lisp
#   (use-package elfeed-goodies
#     :ensure t
#     :init (elfeed-goodies/setup)
#     :config
#     ;; Fix: Pane splits vertically instead of horizontally.
#     ;; https://github.com/jeetelongname/elfeed-goodies/issues/40
#     ;;(setq elfeed-show-entry-switch 'pop-to-buffer)
#     )
# #+END_SRC
# ** [[https://github.com/paulelms/elfeed-autotag][elfeed-autotag]]:
# Easy auto-tagging for elfeed-protocol (and elfeed in general).
# #+BEGIN_SRC emacs-lisp
#   (use-package elfeed-autotag
#     :ensure t
#     :config
#     (setq elfeed-autotag-files '("~/org/personal/elfeed.org"))
#     (elfeed-autotag)
#     )
# #+END_SRC
** TODO Future elfeed packages to pull in:
- https://sr.ht/~johnhamelink/elfeed-paywall/,
  https://www.reddit.com/r/emacs/comments/6r07ea/is_elfeed_able_to_extract_full_text_from_articles/ -
  Avoid paywalls and retrieve content from a feed entry's link.
- https://github.com/zabe40/elfeed-time - elfeed-time displays the approximate
  time it will take to read, watch, or listen to an elfeed entry. It can
  display this information in both elfeed-search-mode, and elfeed-show-mode.
- https://github.com/yt-dlp/yt-dlp,
  https://github.com/cvzi/mpv-youtube-upnext/issues/8 - log into YouTube via
  either: ~.netrc~, or: ~--cookies~ pulled from the browser and stored in a
  file set in the ~yt-dlp~ config file.
- https://cundy.me/post/elfeed/ - Customized
  ~elfeed-search-print-entry-function~ to put more useful information on the
  ~elfeed-search~ buffer. eg. like ~elfeed-time~ (youtube duration, date).
- Fix ~elfeed-org~ tags on FreshRSS sourced feeds.
- https://gist.github.com/alphapapa/80d2dba33fafcb50f558464a3a73af9a - anything
  worth stealing from Alphapapa's config?
- https://noonker.github.io/posts/2020-04-22-elfeed/ - any inspiration?
- https://punchagan.muse-amuse.in/blog/elfeed-hook-to-fetch-full-content/ -
  Fetch full content of a page.
- https://bitbucket.org/shackra/4hoa/src/master/ - A Go application that will
  burn your feeds and retrieve articles of the Internet for you to read in eww
  (or any other non-graphical web browser).
* Reading:
Packages around reading (eg. novels/epubs, Speed Reading, etc).
** [[https://github.com/emacsmirror/spray][spray]]:
Speed reading in a buffer by flashing each word in turn. Spritz clone for speed
reading.

#+BEGIN_SRC emacs-lisp
  (use-package spray
    :ensure t)
#+END_SRC

*** Commands
In ~spray-mode~ buffers, following commands are available:

- ~spray-start/stop~ (~SPC~) pause or resume spraying.
- ~spray-backward-word~ (~h, <left>~) pause and back to the last word.
- ~spray-forward-word~ (~l, <right>~) inverse of spray-backward-word.
- ~spray-faster~ (~f~) increases speed.
- ~spray-slower~ (~s~) decreases speed.
- ~spray-quit~ (~q, <return>~) quit ~spray-mode~.

* Links:
** Configs:
Configs that look good enough to go back and maybe learn/steal from:
- https://github.com/meatcar/emacs.d
- https://github.com/jakebox/jake-emacs
** Packages to try:
- https://github.com/seagle0128/doom-modeline
- https://github.com/emacsorphanage/anzu
