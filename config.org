#+title: My Literate Emacs Config
#+author: Craig Astill
#+email: craig.astill@gmail.com
#+OPTIONS: num:nil
* Dot Emacs
My main ~.emacs~ file.

*NOTE:* For built-in packages, check out the emacs manual via: ~C-h r~!
** Ansible

Install via [[http://docs.ansible.com/ansible/][ansible]] with the following command, which will prompt for sudo
password (pacman package installation) due to the ~-K~ or ~--ask-become-pass~
flag:

- ~cd ansible/~
- ~ansible-playbook main.yml -K~

You can add ~-i hosts~ if you want to run against remote hosts instead of
locally.

*NOTE:* Hard-coded to ArchLinux and my own needs.

* Core:
** Debugging Emacs:
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
#+END_SRC
*** [[https://github.com/Malabarba/elisp-bug-hunter][Bug-Hunter]]
#+BEGIN_SRC emacs-lisp
  (use-package bug-hunter
    :ensure t
    :defer t)
#+END_SRC
*** [[https://github.com/jschaf/esup][ESUP - Emacs Start Up Profiler]]
To start Esup, run ~M-x esup~, and watch the magic happen.

By default, Esup will profile ~user-init-file~. To profile a custom file, call
~esup~ with a prefix argument. That is, ~C-u M-x esup~.
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :ensure t
    :defer t
    :defer
    :config
    ;; Work around a bug where esup tries to step into the byte-compiled
    ;; version of `cl-lib', and fails horribly.
    ;; See; https://github.com/jschaf/esup/issues/85
    (setq esup-depth 0)
    )
#+END_SRC
** General
- Don't prompt to kill processes on exit.

  #+BEGIN_SRC emacs-lisp
    (setq confirm-kill-processes nil)
    (setq-default tab-width 4)
  #+END_SRC

- Global defaults:

  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
  #+END_SRC

- Fuzzy completions (just like ~ido~ with fuzzy matching set + ~smex~) and Save
  history in minibuffers.

  #+BEGIN_SRC emacs-lisp
    (fido-mode t)
    (savehist-mode t)
    (setq savehist-additional-variables '(search-ring regexp-search-ring))
  #+END_SRC
- Highlights:
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)  ;; horizontal highlighted line on cursor.
    ;; http://www.emacswiki.org/emacs/EmacsNiftyTricks
    ;; http://emacs-fu.blogspot.com/2008/12/highlighting-todo-fixme-and-friends.html
    (defun my_highlighted_words ()
      "Highlight specific words in the buffer."
     (interactive)
      (font-lock-add-keywords nil
       '(("\\<\\(Note\\|NOTE\\|FIXME\\|Todo\\|TODO\\|BUG\\|Bug\\):" 1 '(:foreground "red" :weight bold) t))))
  #+END_SRC

*** Desktop:
Auto save all open files in current session and reload on startup.
#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :ensure t
    :defer t
    :init (desktop-save-mode)
    :config
    (progn
      ;; Don't autosave desktops, it's too expensive.  Desktops aren't
      ;; that precious, and Emacs will save the desktop on exit anyway.
      (setq
       desktop-restore-eager 0
       desktop-load-locked-desktop t
       desktop-auto-save-timeout nil
       desktop-path '("~/")
       desktop-dirname "~/")
      (dolist (mode '(magit-mode git-commit-mode))
        (add-to-list 'desktop-modes-not-to-save mode))))
#+END_SRC
*** display-line-numbers:
Use the C-based line numbers instead of the slower lisp (`linum`).
https://www.emacswiki.org/emacs/LineNumbers#h5o-1

#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :hook (
           (prog-mode . 'display-line-numbers)
           (text-mode . 'display-line-numbers)
           )
    :custom-face
     (line-number ((t (:inherit (shadow default) :background "grey10"))))
    )
#+END_SRC
*** which-key:
~which-key~ integration, to show keyboard shortcuts.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
*** [[http://ergoemacs.org/emacs/whitespace-mode.html][whitespace-mode]]:
Highlight white-space (eg. tabs) in the buffer.
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure t
    :config
    (global-whitespace-mode)
    (setq whitespace-style (quote (face trailing tabs)))
    )
#+END_SRC
** flymake:
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :bind (:map flymake-mode-map
           ("C-c e" . flymake-show-buffer-diagnostics)
           ("C-c p" . flymake-show-project-diagnostics)
           ("C-c j" . flymake-goto-next-error)
        )
    :hook (
           (prog-mode . flymake-mode)
           (text-mode . flymake-mode)
           )
    :config
    (progn
     (set-face-attribute 'flymake-error nil :background "DarkRed")
     (set-face-attribute 'flymake-warning nil :background "DarkBlue")
     (set-face-attribute 'flymake-note nil :background "DarkGreen")
     )
    )
#+END_SRC
** Project management:
I've used ~projectile~ for years, but giving ~project~ a go. Only ever used:

| Commands                  | Projectile | Project   |
|---------------------------+------------+-----------|
| Fuzzy search for files    | ~C-c p f~  | ~C-x p f~ |
| Grep project              | ~C-c g~    | ~C-x p g~ |
| Switch buffers in project |            | ~C-x p b~ |
| Switch Project            | ~C-c p p~  | ~C-c p p~ |

Going to try ~project~ for a bit and see how it goes.
*** project (built-in):
#+BEGIN_SRC emacs-lisp
  (use-package project
    :ensure t)
#+END_SRC
*** [[https://github.com/bbatsov/projectile][projectile]]:
#+html: <details><summary><b>Historical notes:</b></summary>

Been getting more annoyed at not using daemon mode on my main box and
connecting with emacsclients. Due to work, I use quite a few git-worktree's
of the same repo. The problem would be accidentally cross editing files
across the different worktree's (Hence not using daemon mode, and instead
just running up multiple ~emacs --debug-init~ sessions for each worktree.

Let's have a go at banishing this behaviour:

- Projectile: Allows for project focus (git repo), whilst also doing fuzzy
  file searching across the entire project (Nice!)
- Perspective: Allows for workspaces that when switched to, return the
  buffers to their original state. Also focuses down the ~ido~ buffer to the
  open buffers in that workspace (Nice!)
- persp-projectile: Combines Projectile and Perspective so that switching
  projects gives you the Perspective buffer change behaviour (Much nicer than
  Projectile's insistence that you want to always open a new file but also
  keep old buffers hanging around).

NOTE: Projectile state is not saved in ~desktop-save~.
NOTE: Perspective mode with IDO only show's files in project, so have to use
ibuffer to get full list.

- https://github.com/bbatsov/projectile
- https://github.com/nex3/perspective-el
- https://github.com/bbatsov/persp-projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :disabled
    ;; :ensure t
    ;; :defer t
    :bind ("C-c p" . 'projectile-command-map)
    :init
    (progn
      (projectile-mode)
      (recentf-mode)  ; enables projectile-recentf mode for recent files.
      ; https://github.com/bbatsov/projectile/issues/1183
      ; Projectile now scrapes all files to discover project type for modeline.
      ; This is calculated on every cursor movement, so lags emacs like crazy.
      ; Below is the workaround to disable this until it is fixed.
      (setq projectile-mode-line
           '(:eval (format " Projectile[%s]"
                          (projectile-project-name))))
      )
    )
#+END_SRC
#+html: </details>
** Server:
#+BEGIN_SRC emacs-lisp
  (use-package server
    :ensure t
    :after (exec-path-from-shell)
    :config
    ;; https://wiki.archlinux.org/title/Emacs#Multiplexing_emacs_and_emacsclient
    (unless (server-running-p)
      (server-start))
    )
#+END_SRC

*** Environment Variables:
See: [[https://github.com/purcell/exec-path-from-shell][Github: purcell/exec-path-from-shell]] & [[http://yitang.uk/2021/06/18/managing-emacs-server-as-systemd-service/][Yi Tang: Managing Emacs Server as
Systemd Service]] for notes on using the environment variables:

#+BEGIN_QUOTE
Environment Variables

The customised shell configuration in .bashrc are loaded when opening an
interactive shell session. So the Emacs server managed by systemd would not
have the environment variables, alias, functions or whatever defined in
.bashrc.

[[https://stackoverflow.com/questions/49764993/using-a-users-bashrc-in-a-systemd-service][This stackoverflow post]] provides the rationale and how to tweak the unit file
so systemd would load .bashrc.

This problem can solved a lot easier on the Emacs side, by using
[[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] package. It will ensure the environment variables inside
Emacs are the same as in the user's interactive shell.

Simply put the following in your .emacs would do the trick.

~(exec-path-from-shell-initialize)~
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    )
#+END_SRC
** mode-line:
The gutter bar at the bottom of the emacs window/frame.
*** +[[https://github.com/Bruce-Connor/smart-mode-line][smart-mode-line]]+:
smart mode line wraps up a lot of nice tweaks in one package.

*NOTE:* Trialling the stock mode-line for a bit to see if I can live without
smart-mode-line.

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    ;; :ensure t
    :disabled t
    :defer t
    :init
    (setq
     sml/no-confirm-load-theme t
     sml/theme 'dark
     sml/mode-width `full
     )
    (sml/setup)
    (column-number-mode t)
    )
#+END_SRC
** Native Compilation:
Don't load outdated byte code.
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC

[[https://stackoverflow.com/questions/1217180/how-do-i-byte-compile-everything-in-my-emacs-d-directory][SO: How do I byte compile everything?]]
#+BEGIN_SRC emacs-lisp
  ;; (byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
#+END_SRC

Log but don't pop up Warnings buffer for all native compilation warnings.
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent)
#+END_SRC
** Spell Checking:
*** flyspell:
See: [[https://www.emacswiki.org/emacs/FlySpell#h5o-4][EmacsWiki: FlySpell Performance]] about disabling
~flyspell-issue-message-flag~ to greatly speed up ~flyspell-buffer~.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :hook (
           (prog-mode . flyspell-prog-mode)
           (text-mode . flyspell-mode)
           )
    :config (setq flyspell-issue-message-flag nil)
    )
#+END_SRC
**** Highlight all spelling mistakes in a buffer in one go.
#+BEGIN_EXAMPLE emacs-lisp
M-x flyspell-buffer
#+END_EXAMPLE emacs-lisp
*** ispell (via aspell):
~ispell~ is the built in spell checker, but ~aspell~ is better (multiple
dictionaries). See: http://www.emacswiki.org/emacs/InteractiveSpell#toc6

#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :ensure-system-package (aspell)
    :config
    (setq
     ispell-program-name "aspell"
     ispell-list-command "list"
     )
    )
#+END_SRC
*** Set local ispell dictionary to Welsh in Welsh files.
Steps:
- Pull welsh dictionary from; https://ftp.gnu.org/gnu/aspell/dict/cy/.
- Un-tar, build and install dictionary: ~./configure && make && sudo make
  install~.
- Set file local variable to set the Welsh dictionary: ~M-x
  add-file-local-variable <ret>ispell-local-dictionary<ret>"cy"<ret>~.
- Revert buffer and verify spellings: ~M-x flyspell-buffer~.
** tab-bar:
The =tab-bar= package creates tabs like a browser. Each tab can maintain it's
layout. Seems to hook into =desktop-save= to restore on restarts.

#+BEGIN_SRC emacs-lisp
  (use-package tab-bar
	:ensure t
	:defer t
	:after (hydra)
	:bind ("C-x t" . 'hydra-tab-bar/body)
	:config
	;; https://github.com/abo-abo/hydra/wiki/Emacs-27-tab-bar-mode
	;; https://github.com/abo-abo/hydra/wiki/Binding-Styles
	(defhydra hydra-tab-bar (:color amaranth)
			  "Tab Bar Operations"
			  ("t" tab-new "Create a new tab" :column "Creation")
			  ("c" tab-new "Create a new tab")
			  ("d" dired-other-tab "Open Dired in another tab")
			  ("f" find-file-other-tab "Find file in another tab")
			  ("0" tab-close "Close current tab")
			  ("k" tab-close "Close current tab")
			  ("m" tab-move "Move current tab" :column "Management")
			  ("r" tab-rename "Rename Tab")
			  ("n" tab-bar-select-tab-by-name "Select tab by name" :column "Navigation")
			  ("s" tab-bar-select-tab-by-name "Select tab by name")
			  ("j" tab-previous "Previous Tab")
			  ("l" tab-next "Next Tab")
			  (";" tab-next "Next Tab")
			  ("q" nil "Exit" :exit t)
			  )
	)
#+END_SRC
** Treesit:
Treesit uses the tree-sitter grammars to provide faces/fontifying/structures to
text by an AST instead of a regex (ie. fast, accurate, works during editing).
*** [[https://github.com/renzmann/treesit-auto][treesit-auto]]:
Automatically install tree-sitter grammars.

#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :ensure t
    :demand t
    :config
    (setq
     treesit-auto-install t
     )
    (global-treesit-auto-mode)
    )
#+END_SRC
* Notifications:
** [[https://github.com/jwiegley/alert][alert]]:
#+BEGIN_SRC emacs-lisp
  (use-package alert
    ;; TODO: Check if Mac can work with libnotify. It works on Linux.
    ;; :ensure-system-package terminal-notifier
    :ensure t
    :commands (alert)
    :init
    (setq
     alert-default-style 'libnotify
     alert-fade-time 15
     )
    )
#+END_SRC
** [[https://github.com/spegoraro/org-alert][org-alert]]:
Notifications from scheduled items in the Org Agenda. Builds off: [[*\[\[https://github.com/jwiegley/alert\]\[alert\]\]:][alert]].

*NOTE:* On Mac's I am using an Alert notification for ~terminal-notifier~, so
that notifications have to be explicitly closed.

#+BEGIN_SRC emacs-lisp
  (use-package org-alert
    ;; https://github.com/julienXX/terminal-notifier/issues/292 -  No Notification in macOS12.1 #292
    ;; https://github.com/julienXX/terminal-notifier
    ;; TODO: Check if Mac can work with libnotify. It works on Linux.
    ;; :ensure-system-package terminal-notifier
    :ensure t
    ;; :disabled t  ;; Why is this blowing up??
    :after (org)
    :config
    (setq
     alert-default-style 'libnotify
     org-alert-notify-cutoff 5
     org-alert-notify-after-event-cutoff 1
     )
    (org-alert-enable)
    )
#+END_SRC
** Custom popup notifications (DEPRECATE!):
Very old way of doing custom notification pop-ups:

- http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html
- https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html,
  since this would be nicer to move to a standardised package.
#+BEGIN_SRC emacs-lisp
  ;; TODO: figure out why the built in `notifications` package doesn't play
  ;; sounds:
  (defun djcb-popup (title msg &optional timeout icon sound)
    "Show a popup if we're on X, or echo it otherwise;
  TITLE is the title of the message, MSG is the context.
  Optionally, you can provide a TIMEOUT (milliseconds, default=5000) an ICON and
  a SOUND to be played (default=/../alert.wav)"
    (interactive)
    (shell-command
     (concat "mplayer -really-quiet "
             (if sound sound "/usr/share/sounds/purple/alert.wav")
             " 2> /dev/null"))
    ;; Removed `(if (eq window-system 'x))` check since it wasn't doing the
    ;; notify-send on my terminal emacs session nested in tmux in a terminal
    ;; under cinnamon.
    (shell-command (concat "notify-send"
                           (if icon (concat " -i " icon) "")
                           (if timeout (concat " -t " timeout) " -t 5000")
                           " '" title "' '" msg "'"))
    ;; text only version
    (message (concat title ": " msg)))
#+END_SRC

Run example:
#+BEGIN_EXAMPLE emacs-lisp
(djcb-popup "Warning" "The end is near"
            nil
            "/usr/share/icons/gnome/128x128/apps/libreoffice-base.png"
            "/usr/share/sounds/purple/alert.wav")
#+END_EXAMPLE
* Version Control:
VC config ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/General-VC-Options.html][VC]] is built in version control package. Magit is an enhanced git VC
package).
** Follow symlinks:
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC
** [[https://magit.vc/][magit]]:
magit - a pretty good git package with more features than the built in emacs
"vc" package.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (
       ("<f3>" . magit-status)
       ("\C-c\C-s" . magit-status)
       ("\C-cg" . vc-git-grep)
       ("\C-cb" . magit-blame))
    :config
    (setq magit-auto-revert-mode t)
    ;; `M-x magit-describe-section-briefly`, then check the square brackets in:
    ;; `<magit-section ... [<section_name> status] ...>`.
    (setq
     magit-section-initial-visibility-alist
     '(
       (stashes . hide)
       (unpulled . show)
       (unpushed . show)
       (pullreqs . show)
       ))
    )
#+END_SRC

** [[https://github.com/emacsorphanage/magit-svn][magit-svn]] (legacy):
Used this years ago when SVN and git-svn where part of my daily work
routine. Haven't needed to touch SVN in years, but keeping here for legacy
reasons.
#+BEGIN_SRC emacs-lisp
  (use-package magit-svn
    :ensure t
    :defer t
    :after (magit)
    )
#+END_SRC
** [[https://github.com/magit/magit-popup][magit-popup]] (legacy):
https://github.com/magit/magit/issues/3749 ~magit~ moved to using ~transient~
but some packages (~magithub~ -
https://github.com/vermiculus/magithub/issues/402) haven't updated, hence
explicit definition of ~magit-popup~

#+BEGIN_SRC emacs-lisp
  (use-package magit-popup
     :ensure t
     :after (magit)
     )
#+END_SRC
** [[https://github.com/magit/forge][forge]]:
Builds on top of Magit to interact with VCS's so that you can create/edit
Issues/PR's.

Replacement for [[https://github.com/vermiculus/magithub][magithub]], which works with Gitlab/Github. See old commits for
my old ~magithub~ config.

#+BEGIN_SRC emacs-lisp
  (use-package forge
    ;; https://www.reddit.com/r/emacs/comments/fe165f/pinentry_problems_in_osx/
    ;; to fix GPG timeouts due to no password provided/asked.
    ;; NOTE: for emacsclients, it asks in the main instance window.
    :if (not (eq system-type 'windows-nt))  ;; FIXME: Needs `cc` compiler defined.
    :ensure t
    :after (magit)
    :config
    (add-to-list 'forge-alist '("git-scm.clinithink.com:2009" "git-scm.clinithink.com/api/v4" "git-scm.clinithink.com" forge-gitlab-repository))
    (add-to-list 'forge-alist '("bitbucket.eigen.live" "bitbucket.eigen.live/rest/api/1.0" "bitbucket.eigen.live" forge-bitbucket-repository))
    (add-to-list 'forge-alist '("gitlab.eigen.live" "gitlab.eigen.live/api/v4" "gitlab.eigen.live" forge-gitlab-repository))
    )
    #+END_SRC
** [[https://github.com/wandersoncferreira/code-review][code-review]]:
Code Review is a package that builds on top of Magit, but supports interacting
with PR's to do code reviews (comments, diff view, approvals, etc).

- ~M-x code-review-forge-pr-at-point~ on forge PR line.
- ~r~ for transient menu in a ~code-review~ buffer.

#+BEGIN_SRC emacs-lisp
  (use-package code-review
    :ensure t
    :defer t
    :after (magit)
    :config
    (setq
     code-review-bitbucket-host "bitbucket.eigen.live/rest/api/1.0"
     code-review-gitlab-host "gitlab.eigen.live/api"
     code-review-gitlab-graphql-host "gitlab.eigen.live/api"
     ;; Dump requests into the logs for debugging. eg.
     ;; https://github.com/wandersoncferreira/code-review/issues/195.
     ;;
     ;; code-review-log-raw-request-responses t
     )
    )
#+END_SRC

* [[https://orgmode.org][org-mode]]:
A GNU Emacs major mode for keeping notes, authoring documents, computational
notebooks, literate programming, maintaining to-do lists, planning projects,
and more — in a fast and effective plain text system.

*NOTE:* Broken apart org mode config via: [[https://github.com/jwiegley/use-package/issues/662][Github:
 jwiegley/use-package/issues/662 - Calling use-package multiple times on the
 same package #662]].
** Core org-mode config:
#+BEGIN_SRC emacs-lisp
  (use-package org
    ;; NOTE: ~ox-confluence~ from ~org-contrib~ never worked well, compared to
    ;; the exports listed in: ~config.org~. Disabling for now.
    ;; https://emacs.stackexchange.com/questions/7890/org-plus-contrib-and-org-with-require-or-use-package
    ;; https://emacs.stackexchange.com/questions/70081/how-to-deal-with-this-message-important-please-install-org-from-gnu-elpa-as-o
    ;; :ensure org-contrib
    :ensure t
    :bind (
       ("C-c l" . org-store-link)
       ("C-c a" . org-agenda)
       ("C-c c" . org-capture))
    :init
    (progn
      (setq
       org-directory "~/org/"
       ;; org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/")
       org-agenda-files (apply 'append
                               (mapcar
                                (lambda (directory)
                                  (directory-files-recursively
                                   directory org-agenda-file-regexp))
                                '("~/org/")))
       org-default-notes-file "~/org/notes.org"
       ;; refile level.
       ;; http://www.millingtons.eclipse.co.uk/glyn/dotemacs.html
       org-refile-targets (quote
                           ((org-agenda-files :maxlevel . 5)
                            ("~/org/personal/projects.org" :maxlevel . 2)
                            ("~/org/programming_notes/notes.org" :maxlevel . 5)))
       ;; Allow refiling to a file to support moving up to heading level 1
       org-refile-use-outline-path 'file
       ;; FIXME: Something has changed to the point where I can no longer refile
       ;; to headings in a file after the file selection part. Changing the
       ;; outline path option below allows me to do it, but it is super laggy
       ;; from all of the headings it is fuzzy searching through.
       ;;
       ;; I may have to give up on refiling to the top heading in a file with the
       ;; ~org-refile-use-outline-path 'file~ change above.
       org-outline-path-complete-in-steps nil
       org-log-done t
       ;; https://kundeveloper.com/blog/org-capture-3/ for `org-capture-templates` ideas.
       org-capture-templates '(
                               ("t" "Todo" entry (file+headline "~/org/todo.org" "UNSORTED")
                                "* TODO %?  %^G\n %U - %i\n  %a")
                               ("p" "Projects" entry (file+headline "~/org/personal/projects.org" "UNSORTED")
                                "* TODO %?\n %U - %i\n  %a")
                               ("b" "Buy" entry (file+headline "~/org/personal/buy.org" "UNSORTED")
                                "* TODO %?\n %U - %i\n  %a")
                               ("i" "Inbox - Dumping ground" entry (file "~/org/inbox.org") "* %?\n")
                               ("n" "Notes" entry (file+headline "~/org/programming_notes/notes.org" "UNSORTED")
                                "* TODO %?\n %U - %i\n  %a")
                               ("y" "YouTube: Watch List.\n\t\t*Link is pulled from X Clipboard!!*\n\t\t*NOTE:* if this is a Playlist;\n\t\t- manually delete ~v=<id>&~.\n\t\t- keep: ~list=<id>~!" entry (file+headline "~/org/personal/personal_todos.org" "YouTube Watch list:")
                                "* [[shell:mpv %x &][YouTube: %?]]  :WATCH:")
                               )
       )

      (global-set-key "\C-cr" (lambda () (interactive) (org-capture nil "t")))
      (global-set-key "\C-cn" (lambda () (interactive) (org-capture nil "n")))
      )
    :config
    ;; ;; Explicit requires from the `org-contrib` package.
    ;; (require 'ox-confluence)  ;; FIXME: wrong type arguments error!
    (setq
     org-link-file-path-type 'relative
     org-use-tag-inheritance nil  ;; Don't show un-tagged sub-headings when there is a tag on a high-level.
     )
  )
#+END_SRC
** Capture/Reminders:
- http://orgmode.org/worg/code/elisp/dto-org-gtd.el
- http://www.gnu.org/software/emacs/manual/html_node/org/Remember-templates.html
** macros:
- Convert markdown links (~[display_message](link)~) to org links
  (~[[link][display_message]]~):
  #+BEGIN_SRC emacs-lisp
    (fset 'convert-markdown-link-to-org-link
     "\C-[xreplace-regexp\C-m\\[\\(.*\\)\\](\\(.*\\))\C-m[[\\2][\\1]]\C-m")
 #+END_SRC
** export:
Suggested [[https://orgmode.org/manual/Export-Settings.html][Export Options]] at top of file: ~#+OPTIONS: \n:nil toc:nil
num:nil~. Or: ~#+OPTIONS: \n:nil toc:nil num:nil html-postamble:nil~ to remove
the footer as well.

- No line wrapping.
- No TOC.
- Don't number headings.
*** Export org to Confluence:
Been trying different ways to export org files to then dump into
Confluence. Current rating of exporters:

1. Export to HTML.
   - Highlight region.
   - ~M-x org-html-export-as-html~, cursor jumps to export buffer.
   - ~M-x browse-url-of-buffer~, to open in your browser.
   - Select all in Browser tab and paste into Confluence edit mode.
2. Export to ASCII.
   - ~M-x org-ascii-export-as-ascii~.
   - Requires below config changes.
   - Issues around Headings being picked up by Confluence (eg. h3 == h2, no h3+).
   - Issues around Formatting being picked up by Confluence (eg. No Bold markup).
3. Export to Markdown.
   - ~M-x org-md-export-as-markdown~.
   - Great rendering in a ~/markdown~ macro, but other macros cannot be nested
     inside or work with the ~/markdown~ macro. eg. No ~/toc~ macro.
   - Pretty good rendering pasting into Confluence edit area, but no auto
     wrapping. ie. 80 characters.
4. *BROKEN:* ~M-x ox-confluence~ from ~org-contrib~ throws errors on emacs29.

*** Confluence ascii export config:
Better ASCII export output from org files when the target is an Atlassian
Confluence Wiki. Export via: ~M-x org-ascii-export-as-ascii~ (~C-cC-etA~).

*TODO: figure out what Heading underlining style Confluence uses for H3-H5!!*

#+BEGIN_SRC emacs-lisp
  (setq org-ascii-text-width 10000)  ;; Large text width to avoid line wrapping.
  (setq org-ascii-inner-margin 0)  ;; Don't indent lines between headings.
  ;; Confluence expects H2 to be ~-~.
  (setq org-ascii-underline '((ascii 61 45 45)
                              (latin1 61 126 45)
                              (utf-8 9552 9472 9548 9476 9480)))

#+END_SRC

** [[https://github.com/astahlman/ob-async][ob-async]]:
Add: ~:async~ to an org-babel code block to run async when called with:
~C-cC-c~.

#+BEGIN_SRC emacs-lisp
  (use-package ob-async
    :ensure t)
#+END_SRC
** org-agenda:
*** Custom Agenda views:
- https://www.orgmode.org/manual/Custom-Agenda-Views.html
- https://redgreenrepeat.com/2021/04/09/org-mode-agenda-getting-started-scheduled-items-and-todos/
- http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/#the-agenda
- https://github.com/gjstein/emacs.d/blob/master/config/gs-org-agenda.el

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq
     org-agenda-custom-commands '(
                                  ;; Keep tags but hide `DONE` tasks: https://orgmode.org/manual/Matching-tags-and-properties.html
                                  ("r" "Agenda Review"
                                   (
                                    (agenda "")
                                    (tags "ACTION" ((org-agenda-overriding-header "\nItems I need to action!! ~:ACTION:~")))
                                    (tags "CHASE" ((org-agenda-overriding-header "\nChase down these people!! ~:CHASE:~")))
                                    (tags "INVESTIGATE|INVESTIGATION" ((org-agenda-overriding-header "\nInvestigation tasks!! ~:INVESTIGATE:INVESTIGATION:~")))
                                    (tags "REVIEW|WIKI" ((org-agenda-overriding-header "\nDump this into Confluence!! ~:REVIEW:WIKI:~")))
                                    (tags "READ|WATCH" ((org-agenda-overriding-header "Books/Links I need to read/WATCH!! ~:READ:WATCH:~")))
                                    (tags "TRAINING" ((org-agenda-overriding-header "Current/Future training tasks ~:TRAINING:~")))
                                    (tags "ADMIN" ((org-agenda-overriding-header "Admin tasks ~:ADMIN:~")))
                                    (tags-todo "-ACTION-ADMIN-CHASE-READ-REVIEW-TRAINING-WATCH-WIKI" ((org-agenda-overriding-header "\nGeneral TODO's")))
                                    )
                                   nil  ;; settings
                                   ("/tmp/org_agenda_review.html" "/tmp/org_agenda_review.ics" "/tmp/org_agenda_review.txt")  ;; ~org-store-agenda-views~ output file
                                   )
                                  ;; https://fortelabs.com/blog/para/
                                  ("p" "PARA Personal (Project Area Resources Archive) Agenda Review"
                                   (
                                    (agenda "" ((org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/"))))
                                    (tags "ACTION|CHASE|INVESTIGATE|INVESTIGATION|TRAVEL" ((org-agenda-overriding-header "\nProject: \"a series of tasks linked to a goal, with a deadline.\"  ~:ACTION:CHASE:INVESTIGATE:INVESTIGATION:~") (org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/"))))
                                    (tags-todo "-ACTION-ADMIN-CHASE-EMACS-PERSONAL-READ-REVIEW-TRAINING-TRAVEL-WATCH-WIKI-WORKFLOW" ((org-agenda-overriding-header "Project: (Tag to remove non-urgent TODO's out of this list!!)") (org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/"))))
                                    (tags "ADMIN|REVIEW|WIKI|WORKFLOW" ((org-agenda-overriding-header "\nAreas: \"a sphere of activity with a standard to be maintained over time.\"  ~:ADMIN:REVIEW:WIKI:WORKFLOW:~") (org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/"))))
                                    (tags "EMACS|PERSONAL|READ|TRAINING|WATCH|UNSORTED" ((org-agenda-overriding-header "\nResource: \"a topic or theme of ongoing interest.\"  ~:EMACS:PERSONAL:READ:TRAINING:WATCH:UNSORTED:~") (org-agenda-files (list "~/org/" "~/org/personal/" "~/org/programming_notes/"))))
                                    )
                                   nil  ;; settings
                                   ;; See: https://orgmode.org/manual/Exporting-Agenda-Views.html
                                   ;; ~M-x org-store-agenda-views~ outputs all files for all views.
                                   ;; Script export: ~emacs --batch -l ~/.emacs --eval '(org-store-agenda-views)'~
                                   ("/tmp/org_agenda_para.html" "/tmp/org_agenda_para.ics" "/tmp/org_agenda_para.txt")
                                   )
                                  ("w" "PARA Work (Project Area Resources Archive) Agenda Review"
                                   (
                                    (agenda "" ((org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    (tags "ACTION|CHASE|INVESTIGATE|INVESTIGATION|TRAVEL" ((org-agenda-overriding-header "\nProject: \"a series of tasks linked to a goal, with a deadline.\"  ~:ACTION:CHASE:INVESTIGATE:INVESTIGATION:~") (org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    (tags-todo "-ACTION-ADMIN-CHASE-EMACS-PERSONAL-READ-REVIEW-TRAINING-TRAVEL-WATCH-WIKI-WORKFLOW" ((org-agenda-overriding-header "Project: (Tag to remove non-urgent TODO's out of this list!!)") (org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    (tags "ADMIN|REVIEW|WIKI|WORKFLOW" ((org-agenda-overriding-header "\nAreas: \"a sphere of activity with a standard to be maintained over time.\"  ~:ADMIN:REVIEW:WIKI:WORKFLOW:~") (org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    (tags "READ|TRAINING|WATCH|UNSORTED" ((org-agenda-overriding-header "\nResource: \"a topic or theme of ongoing interest.\"  ~:READ:TRAINING:WATCH:UNSORTED:~") (org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    )
                                   nil  ;; settings
                                   ;; See: https://orgmode.org/manual/Exporting-Agenda-Views.html
                                   ;; ~M-x org-store-agenda-views~ outputs all files for all views.
                                   ;; Script export: ~emacs --batch -l ~/.emacs --eval '(org-store-agenda-views)'~
                                   ("/tmp/org_agenda_para.html" "/tmp/org_agenda_para.ics" "/tmp/org_agenda_para.txt")
                                   )
                                  ("d" "Agenda for Today (Compact view for Exporting to displays)"
                                   (
                                    (agenda)
                                    (tags "ACTION|CHASE|INVESTIGATE|INVESTIGATION|TRAVEL" ((org-agenda-overriding-header "Project: \"a series of tasks linked to a goal, with a deadline.\"  ~:ACTION:CHASE:INVESTIGATE:INVESTIGATION:~")))
                                    )
                                   (
                                    (org-agenda-span 1)
                                    (org-agenda-use-time-grid nil)
                                    )
                                   ("/tmp/org_agenda_today.html" "/tmp/org_agenda_today.ics" "/tmp/org_agenda_today.txt")
                                   )
                                  ("i" "Personal agenda for last 2 weeks"
                                   (
                                    (agenda "")
                                    )
                                   (
                                    (org-agenda-span 15)
                                    (org-agenda-start-day "-14d")
                                    (org-agenda-skip-function-global nil)
                                    )
                                   )
                                  ("o" "Work agenda for last 2 weeks (1-2-1 Reviews)"
                                   (
                                    (agenda "" ((org-agenda-files (directory-files-recursively "~/org/work/" org-agenda-file-regexp))))
                                    )
                                   (
                                    (org-agenda-span 15)
                                    (org-agenda-start-day "-14d")
                                    (org-agenda-skip-function-global nil)
                                    )
                                   )
                                  )
     org-src-fontify-natively t
     org-overriding-columns-format "%CATEGORY %80ITEM %TODO %TAGS"  ;; C-cC-xC-c in an Agenda view.
     org-agenda-compact-blocks t  ;; Compact agenda. Same as setting: `org-agenda-block-separator nil`.
     org-agenda-tags-column 100  ;; Stop tags rendering off the right of the buffer.
     org-agenda-skip-function-global '(org-agenda-skip-entry-if 'todo 'done)  ;; Hide `DONE` lines from Agenda view.
     )
    )
#+END_SRC
*** [[https://orgmode.org/org.html#Repeated-tasks][Repeated tasks]]:
- Tag repeated tasks with a deadline (~C-cC-d~).
- Add the repeat [and reminder] value.
- Mark as done with ~C-cC-t~, which will log that ~DOEN~ and update the
  deadline to the next future point.

Repeat every fortnight:
#+BEGIN_EXAMPLE emacs-lisp
  ,** TODO example every fortnight task
  DEADLINE: <2022-08-01 Mon 09:00-09:15 +2w -3d>
  :PROPERTIES:
  :LAST_REPEAT: [2022-07-18 Mon 15:35]
  :END:
  - State "DONE"       from "TODO"       [2022-07-18 Mon 15:35]
  - Above ~State~ line is added for each ~C-cC-t~ press!
#+END_EXAMPLE

Repeat daily, but next iteration is after today, if marking as ~"DONE"~ after
missing several days:
#+BEGIN_EXAMPLE emacs-lisp
  ,* TODO [#A] Habits                                        :PERSONAL:TRAINING:
  SCHEDULED: <2023-02-11 Sat 09:00 .+1d>
  :PROPERTIES:
  :LAST_REPEAT: [2023-02-10 Fri 11:41]
  :END:
  - State "DONE"       from "TODO"       [2023-02-10 Fri 11:41]
  - State "DONE"       from "TODO"       [2023-02-02 Thu 16:28]
  - State "DONE"       from "TODO"       [2023-01-19 Thu 09:57]
  - Note taken on [2023-01-19 Thu 00:13] \\
    + [X] 5 min cycle
    + [X] weights
    + [X] Duolingo
    + [X] typing
#+END_EXAMPLE

** org-babel:
*** [[https://emacs.stackexchange.com/questions/20577/org-babel-load-all-languages-on-demand][Load (all) languages on-demand]]:
Also see: [[https://orgmode.org/worg/org-contrib/babel/languages/index.html#configure][Org-Babel: Activate Languages]].

#+BEGIN_SRC emacs-lisp
(defadvice org-babel-execute-src-block (around load-language nil activate)
  "Load language if needed"
  (let ((language (org-element-property :language (org-element-at-point))))
    (unless (cdr (assoc (intern language) org-babel-load-languages))
      (add-to-list 'org-babel-load-languages (cons (intern language) t))
      (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))
    ad-do-it))
#+END_SRC
*** Redirect stderr to =:results= block:
See: [[https://emacs.stackexchange.com/questions/75778/org-babel-redirect-stderr-c-option-requires-an-argument][StackOverflow: Org Bable Redirect stderr (-c option requires an argument)]].

Either:

- Redirect all output at the file level:
  #+BEGIN_EXAMPLE emacs-lisp
    ,#+PROPERTY: header-args:shell :prologue "exec 2>&1" :epilogue ":" :results drawer
  #+END_EXAMPLE
- Redirect all output at the Heading level:
  #+BEGIN_EXAMPLE emacs-lisp
    :PROPERTIES:
    :header-args:shell: :prologue "exec 2>&1" :epilogue ":" :results drawer
    :END:
  #+END_EXAMPLE

*NOTE:* ~C-cC-c~ on the Property block to refresh for the file.
** [[https://github.com/theodorewiles/org-mind-map][org-mindmap]]:
#+BEGIN_SRC emacs-lisp
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  ;; https://github.com/theodorewiles/org-mind-map
  (use-package org-mind-map
    :init
    (require 'ox-org)
    :ensure t
    ;; Uncomment the below if 'ensure-system-package` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    :config
    (setq org-mind-map-default-graph-attribs
          '(("autosize" . "false")
            ("size" . "9,12")
            ("resolution" . "200")
            ("nodesep" . "0.75")
            ("overlap" . "false")
            ("spline" . "true")
            ("rankdir" . "LR")))
    ;; (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    )
#+END_SRC
** [[https://github.com/takaxp/org-tree-slide][org-tree-slide]]:
Modern Org Presentation solution.

Base config stolen from: [[https://github.com/jypma/emacsconf2021/blob/master/presentation.org#package-org-tree-slide][Github:
jypma/emacsconf2021/blob/master/presentation.org]].

#+BEGIN_SRC emacs-lisp
  (defun my/presentation-setup ()
    (shell-command "dunstctl set-paused true")
    (turn-off-fci-mode)
    (flyspell-mode 0)
    (setq text-scale-mode-amount 3)
    (org-display-inline-images)
    (text-scale-mode 1)
    (font-lock-flush)
    (font-lock-ensure))

  (defun my/presentation-end ()
    (shell-command "dunstctl set-paused false")
    (turn-on-fci-mode)
    (flyspell-mode 1)
    (text-scale-mode 0)
    (org-remove-inline-images)
    (font-lock-flush)
    (font-lock-ensure))

  (use-package org-tree-slide
    :ensure t
    ;; Load immediately, since it messes with org-mode faces
    :demand
    :hook
    ((org-tree-slide-play . my/presentation-setup)
     (org-tree-slide-stop . my/presentation-end))
    :bind
    (:map org-mode-map
          ("<f6>" . org-tree-slide-mode))
    :custom
    (org-image-actual-width nil)
    )
#+END_SRC
** todo keywords:

Applying styles to TODO keywords in org files:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        '(
          ("TODO" . org-warning)
          ("STARTED" . "yellow")
          ("INPROGRESS" . "yellow")
          ("BLOCKED" . (:foreground "white" :weight bold :background "red"))
          ("CANCELED" . (:foreground "blue" :weight bold :strikethough t))
          ("PARKED" . (:forground "dark grey"))
          )
        )
#+END_SRC
* Diagrams:
Modes for drawing diagrams like: Ladder/Sequence, MindMaps, Class/Block/Object,
UML diagrams.
** [[https://mermaid.js.org/intro/][mermaid]]:
Mermaid is a new plaintext diagram markup that has native rendering support in
Github (See: [[https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams][Github Docs: Creating Diagrams]]). To render locally, you need to
install: [[https://github.com/mermaid-js/mermaid-cli][=mermaid-cli=]]. Example that /should/ render natively in Github:

#+BEGIN_SRC mermaid
  sequenceDiagram
   A-->B: Works!
#+END_SRC

*** [[https://github.com/abrochard/mermaid-mode][mermaid-mode]]:
~brew install mermaid-cli` falls over with: ~Error: mermaid-cli has been
disabled because it installs a pre-built copy of Chromium!~.

Which is mentioned in the Closed:WontFix issue: [[https://github.com/mermaid-js/mermaid-cli/issues/288][update brew formula to work
with 9.0.3 #288]]. Installing via =npm= globally instead.

#+BEGIN_SRC emacs-lisp
  (use-package mermaid-mode
    :ensure-system-package (mmdc . "npm install -g @mermaid-js/mermaid-cli")
    :ensure t
    )
#+END_SRC

*** [[https://github.com/arnm/ob-mermaid][ob-mermaid]]:
#+BEGIN_SRC emacs-lisp
  (use-package ob-mermaid
    :ensure-system-package (mmdc . "npm install -g @mermaid-js/mermaid-cli")
    :ensure t
    )
#+END_SRC

** [[https://plantuml.com/][plantuml]]:
Create architecture/design images with UML.

Here are some good org-babel plantuml examples: [[https://github.com/dfeich/org-babel-examples/blob/master/plantuml/plantuml-babel.org][Github:
dfeich/org-babel-examples/blob/master/plantuml/plantuml-babel.org]].

*NOTE:* On Mac's =brew= does not symlink =OpenJDK= by default, to not break
system packages. Run:

#+BEGIN_SRC shell :results silent
  sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun plantuml-compile-buffer-hook()
    "Compile command to generate a PNG from the current plantuml buffer."
    (compile (concat "java -jar ~/org/plantuml.jar " buffer-file-name ";\njava -jar ~/org/plantuml.jar -tsvg " buffer-file-name))
    (message (concat "Generated PNG for: " buffer-file-name))
    )

  (use-package plantuml-mode
    ;; https://plantuml.com/emacs
    :ensure-system-package ((dot . graphviz) (java))
    :ensure t
    :after (org org-src)
    ;; FIXME: since my tree-sit change in python to use `python-mode`
    ;; everywhere, it seems to have broken the `.plantuml` look-up in
    ;; `auto-mode-alist`. ie. plantuml files open up with `python-mode` ??
    :mode "\\.plantuml\\'"
    :hook
    (
     (plantuml-mode . my-programming-defaults-config)
     (plantuml-mode . (lambda () (add-hook 'after-save-hook 'plantuml-compile-buffer-hook nil 'make-it-local)))
     )
    :init
    ;; Enable plantuml-mode for PlantUML org code block
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    :config
    (setq
     ;; Use plantuml server, once: ~(setq plantuml-default-exec-mode 'server)~.
     ;; https://hub.docker.com/r/plantuml/plantuml-server
     ;; docker run -d -p 8099:8080 plantuml/plantuml-server:jetty
     ;; plantuml-server-url "http://localhost:8099"

     ;; See: following issue for inability to use PlantUML server in org-babel:
     ;; https://github.com/skuro/plantuml-mode/issues/165
     org-plantuml-jar-path "~/org/plantuml.jar"
     plantuml-jar-path "~/org/plantuml.jar"
     plantuml-default-exec-mode 'jar
     )
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((plantuml . t)))
    )
#+END_SRC
* Docker:
** docker:
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :defer t
    :bind ("C-c d" . docker)
    :config
    ;; https://github.com/Silex/docker.el/issues/188
    ;; Don't use vterm everywhere.
    (setq
     docker-run-async-with-buffer-function 'docker-run-async-with-buffer-shell
     docker-container-columns '(
                                (:name "Names" :width 30 :template "{{ json .Names }}" :sort nil :format nil)
                                (:name "Status" :width 30 :template "{{ json .Status }}" :sort nil :format nil)
                                (:name "Image" :width 40 :template "{{ json .Image }}" :sort nil :format nil)
                                (:name "Id" :width 12 :template "{{ json .ID }}" :sort nil :format nil)
                                (:name "Ports" :width 20 :template "{{ json .Ports }}" :sort nil :format nil)
                                (:name "Command" :width 23 :template "{{ json .Command }}" :sort nil :format nil)
                                (:name "Created" :width 23 :template "{{ json .CreatedAt }}" :sort nil :format (lambda (x) (format-time-string "%F %T" (date-to-time x))))
                                )
     )
    )
#+END_SRC
** dockerfile:
*TODO:* Convert to =eglot=/=flymake=.
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :defer t
    :after (flycheck lsp-mode)
    :hook
    (
     (dockerfile-mode . lsp)
     (dockerfile-mode . (lambda () (set (make-local-variable 'compile-command) "docker build .")))
     ;; (dockerfile-mode . (lambda () (lsp-deferred) (flycheck-add-next-checker 'lsp 'dockerfile-hadolint)))
     )
    )
#+END_SRC
** Kubernetes:
#+BEGIN_SRC emacs-lisp
  ;; (use-package kubernetes
  ;;   ;; https://kubernetes-el.github.io/kubernetes-el/
  ;;   :ensure t
  ;;   :defer t
  ;;   :commands (kubernetes-overview)
  ;;   :init
  ;;   ;; https://github.com/kubernetes-el/kubernetes-el/issues/265
  ;;   ;; Work around: cyclic dependency.
  ;;   ;; `Debugger entered--Lisp error: (invalid-function kubernetes-utils--save-window-state)`
  ;;   (defmacro kubernetes-utils--save-window-state (&rest body)
  ;;     `(let ((pos (point)) (col (current-column)) (window-start-line (window-start)) (inhibit-redisplay t))
  ;;        (save-excursion ,@body)
  ;;        (goto-char pos)
  ;;        (move-to-column col)
  ;;        (set-window-start (selected-window) window-start-line)))
  ;; )
#+END_SRC
** tramp-container (built-in):
Tramp into a docker container with: ~C-x C-f /docker:[user@]container:/path/to/file~

Originally used: [[https://github.com/emacs-pe/docker-tramp.el][docker-tramp]], but updated to latest Emacs29 (on 2022-10-25)
and now have this warning: ~ ■ Warning (emacs): Package ‘docker-tramp’ has been
obsoleted, please use integrated package ‘tramp-container’ [2 times]~, so
removing for: ~tramp-container~.

*NOTE:* [[https://blog.phundrak.com/emacs-29-what-can-we-expect/#tramp-natively-supports-docker-podman-and-kubernetes][TRAMP natively supports Docker, Podman and Kubernetes]]. Need to look
 into how this will work in latest Emacs29 branch builds!!
* Programming Languages:
** Completions:
Code completions. This can be done with the built-in ~completion-at-point~
(~C-M-i~), but using ~company-mode~ for a drop down at point.
*** company-mode:
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :bind (:map company-active-map
           ("C-n" . company-select-next)
           ([(tab)] . company-complete)
           )
    :hook ((prog-mode . global-company-mode))
    :config
    (setq
      company-tooltip-limit 20 ; bigger popup window.
      company-idle-delay .3    ; decrease delay before autocompletion popup shows.
      ;; (setq company-backends (delete 'company-semantic company-backends))
      )
    )

#+END_SRC
*** company-statistics:
Rate completions by use.
#+BEGIN_SRC emacs-lisp
  (use-package company-statistics
    :ensure t
    :after (company-mode)
    :hook ((after-init . company-statistics-mode))
    )
#+END_SRC
++ C/CPP:
** cmake:
- https://emacs-lsp.github.io/lsp-mode/page/lsp-cmake/
- ~pipenv install --dev cmake-language-server~.
  - Bit weird, but need to activate pipenv on a python file in the repo, then
    reload the CMakeList.txt`.

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure-system-package (cmake)
    :ensure t
    ;; FIXME: Hook breaks the `ensure-system-package` call.
    ;; :hook (cmake-mode . lsp)
    )
#+END_SRC
** cpp:
*** cc-mode:
TODO:

- Move to =eglot=.
  - Treesit mode is being picked up now but eglot is not enabled in the mode.
- Build ~compile_commands.json~.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
  (add-to-list 'major-mode-remap-alist '(c-or-c++-mode . c-or-c++-ts-mode))

  (use-package cc-mode
    ;; https://emacs-lsp.github.io/lsp-mode/page/lsp-clangd/
    :ensure t
    :after (eglot)
    )
#+END_SRC
*** cc-mode (historical):
My very very old setup, long before LSP was a thing. Haven't used it in about a
decade.
#+BEGIN_SRC emacs-lisp
  ;; (use-package cc-mode
  ;;   ;; gdb on mac:
  ;;   ;; brew tap homebrew/dupes && brew install gdb
  ;;   ;; Note: gdb keybinding is: C-x C-a C-l, which I did have my rename term windows as.
  ;;   :ensure t
  ;;   :defer t
  ;;   :bind (
  ;;          ;; ("<f9>" . compile)
  ;;          ([remap comment-region] . 'recompile)  ; "C-c C-c"
  ;;          ("M-." . 'xref-find-definitions)  ; https://www.emacswiki.org/emacs/EmacsTags
  ;;          )
  ;;   :config
  ;;   (progn

  ;;     (use-package smart-compile
  ;;       :ensure t
  ;;       :defer t)

  ;;     (use-package xcscope
  ;;       ;; Use cscope files within emacs, to jump around C/C++ code.
  ;;       ;; https://github.com/dkogan/xcscope.el
  ;;       :ensure t
  ;;       :defer t
  ;;       :config
  ;;       (progn
  ;;         ;; Setup auto-magically hooks into c/c++ modes.
  ;;         (cscope-setup)
  ;;         )
  ;;       (define-key c++-mode-map [remap c-set-style] 'cscope-find-this-symbol)  ;; C-c .
  ;;       ;; Note etags search defaults to: M-.
  ;;       )

  ;;     (use-package company-c-headers
  ;;       ;; Complete c-headers
  ;;       :ensure t
  ;;       :defer t
  ;;       :config
  ;;       (push 'company-c-headers company-backends)
  ;;       )

  ;;     ;; cc-mode general settings.

  ;;     ;; g++-4.9 -g3 -Wall -std=c++11 -stdlib=libc++ -lc++ *.cpp
  ;;     ;; clang++ -g3 -Wall -std=c++11 -stdlib=libc++ -lc++ *.cpp
  ;;     (add-to-list 'smart-compile-alist '("\\.[Cc]+[Pp]*\\'" . "clang++ -g3 -Wall -std=c++11 -stdlib=libc++ -lc++ -o %n.out *.cpp"))
  ;;     (add-hook 'c-mode-common-hook 'my-programming-defaults-config)
  ;;     (setq c-basic-offset 4)  ;; http://emacswiki.org/emacs/IndentingC
  ;;     (setq c-default-style "linux")  ;; http://cc-mode.sourceforge.net/html-manual/Built_002din-Styles.html#Built_002din-Styles
  ;;     ;; FIXME: Either bound this to `*compilation*` window only, so it stops
  ;;     ;; jumping when I grep, or find the old stop-on-first-error behaviour I
  ;;     ;; used to use.
  ;;     (setq compilation-auto-jump-to-first-error nil)
  ;;     )
  ;;   (define-key c++-mode-map [remap comment-region] 'compile)  ;; C-c C-c
  ;;   )
#+END_SRC
*** clang:
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    ;; Applies clang-format to C++ files based on a .clang-format file in the
    ;; project.
    ;; requires `clang-format` to be installed from system package manger.
    :ensure-system-package (clang)
    :ensure t
    :after (cc-mode)
    :config
    (progn
      (define-key c++-mode-map (kbd "C-c #") 'clang-format-region)
      )
    )
#+END_SRC
*** Function to Create ~TAG~ file:
Used to use this a decade ago. Not sure if it's worth keeping now that
LSP is the common way to offload completions and look-ups.

#+BEGIN_SRC emacs-lisp
  (defun create-tags (dir-name)
    "Create tags file in directory: DIR-NAME."
    (interactive "Directory: ")
    (eshell-command
     ; (format "find %s -type f -name \"*.[ch]\" | etags -" dir-name))) ;; `.c`/`.h` in a non-git repo.
     (format "cd $(git rev-parse --show-toplevel) && git ls-files | etags -" dir-name)))  ;; tag all files.
#+END_SRC
** debugging:
*** [[https://github.com/realgud/realgud][realgud]]:
#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :ensure t
    :defer t)
#+END_SRC
** [[https://github.com/preetpalS/emacs-dotenv-mode][dotenv-mode]]:
Major mode for ~.env~ files.

#+BEGIN_SRC emacs-lisp
  (use-package dotenv-mode
    :ensure t)
#+END_SRC
** [[https://joaotavora.github.io/eglot/][eglot]]:
Eglot ([[https://github.com/joaotavora/eglot][Github: joaotavora/eglot]]) is the built-in, streamlined LSP (Language
Server Protocol) client for emacs, to talk to LSP Servers with. it is the
alternative to the external,feature-rich package: [[*LSP (Language Server Protocol):][lsp-mode]].

NOTE: Currently transitioning over to ~eglot~ from: ~lsp-mode~, as part of
trying to slim down config and use more built-ins.

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :after (company-mode)
    :hook (
           (eglot-mode . global-company-mode)
           (prog-mode . eglot-ensure)
           )
    :ensure t)
#+END_SRC
** go:
Go config links:

- https://andrewjamesjohnson.com/configuring-emacs-for-go-development/.
- https://legends2k.github.io/note/go_setup/.
- [[https://gist.github.com/GnaneshKunal/3d3f982ce1903990eedd586952893422][Github Gist: GnaneshKunai/go-ts-fmt.el]].
- https://arenzana.org/2019/01/emacs-go-mode/.
- https://honnef.co/articles/writing-go-in-emacs/ &
  https://honnef.co/articles/writing-go-in-emacs-cont./.
- https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins.

*** [[https://github.com/dominikh/go-mode.el][go-mode]]:
Requires ~go~ & ~gopls~ to be installed. See:

- https://github.com/golang/tools/tree/master/gopls
- https://emacs-lsp.github.io/lsp-mode/page/lsp-gopls/

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure-system-package (go gopls)
    :ensure t
    :after eglot
    :functions flycheck-mode
    :preface
    (defun cas/go-config ()
      "Tame tab indenting for go mode."
      (setq tab-width 4)
      (setq go-ts-mode-indent-offset 4)
      (setq indent-tabs-mode t)
      ;; (add-hook 'before-save-hook #'eglot-format-buffer t t)
      (add-hook 'before-save-hook #'gofmt-before-save)
      (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
               "go build -v && go test -v && go vet"))
      )
    :hook (
           (go-ts-mode . cas/go-config)
           (go-ts-mode . eglot-ensure)
       )
    )
#+END_SRC
*** [[https://github.com/benma/go-dlv.el/][go-dlv]]:
Debug Go programs with: [[https://github.com/go-delve/delve][Delve]], via: [[https://github.com/benma/go-dlv.el/][go-dlv]] on top of [[https://github.com/realgud/realgud][realgud]].

For help either look at: [[https://github.com/go-delve/delve/blob/master/Documentation/cli/README.md][Github:
go-delve/delve/blob/master/Documentation/cli/README.md]], or: ~help~ in a
running delve process.

Typical workflow might be:

- Debug Tests: ~M-x dlv <return> dlv test <return>~, Debug App: ~dlv debug~.
- Set Breakpoint: ~b <file>:<line>~, List: ~bp~, toggle: ~toggle <int>~
- Start/Continue: ~c~.
- Step: ~s~, Step Over: ~n~, Step Out: ~n~.
- Print variable: ~p <variable>~.
- Call function: ~call <func>~.
- Restart: ~r~. **NOTE:** need to restart debug session to pick up file
  changes!!
- Exit: ~exit~

#+BEGIN_SRC emacs-lisp
  (use-package go-dlv
    :ensure-system-package (delve)
    :ensure t
    :after (realgud)
    )
#+END_SRC

** LSP (Language Server Protocol):
~lsp-mode~ is the external, feature-rich version of: [[*\[\[https://joaotavora.github.io/eglot/\]\[eglot\]\]:][eglot]] (built-in), for
interacting with LSP Servers in emacs.
*** LSP core:
*** LSP Python Extensions:
**** [[https://github.com/fredcamps/lsp-jedi][lsp-jedi]]:
I preferred [[https://jedi.readthedocs.io/en/latest/][jedi]] over [[https://github.com/python-rope/rope][rope]] for ease of setup and usage, but have moved away
from Jedi for [[https://github.com/microsoft/pyright][pyright]] ([[*\[\[https://emacs-lsp.github.io/lsp-pyright/\]\[lsp-pyright\]\]:][lsp-pyright]]) since it is installed outside of
dependencies (so more consistent usage with emacs across repos + no longer have
to fight to install dev dependencies for local editor completions). See:
https://github.com/pappasam/jedi-language-server.

#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-jedi
  ;;   :ensure t
  ;;   :defer t
  ;;   :after (python-mode lsp)
  ;;  )
#+END_SRC
**** [[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]]:
My Current choice of sourcing completions for python: [[https://github.com/emacs-lsp/lsp-pyright][Github:
emacs-lsp/lsp-pyright]].
#+BEGIN_SRC emacs-lisp
  (use-package lsp-pyright
    :disabled
    ;; :ensure t
    :defer t
    :after (python-mode lsp)
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+END_SRC
**** [[ https://emacs-lsp.github.io/lsp-python-ms/][lsp-python-ms]]:
NOTE: Working on some code that prevents me installing Jedi due to
dependency conflicts. Trying out MS Python, but eventually moved over to:
[[*\[\[https://emacs-lsp.github.io/lsp-pyright/\]\[lsp-pyright\]\]:][lsp-pyright]]. Error:

#+BEGIN_EXAMPLE emacs-lisp
(ignore-error module-not-gpl-compatible
  ;; Added ingore-error due to noise from tree-sitter-langs `python.dylib`.
  ;; See: https://github.com/emacs-tree-sitter/elisp-tree-sitter/issues/100
for a similar problem on NixOS.
)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package lsp-python-ms
    :disabled
    ;; :ensure t
    :defer t
    :after (python-mode lsp)
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           ;; Using `lsp-deferred` since it handles showing
                           ;; errors in the buffer after the MS LSP agent has
                           ;; finished analysis (instead of `lsp`).
                           (lsp-deferred))))
#+END_SRC
** markdown:
*** [[https://github.com/jrblevin/markdown-mode][markdown-mode]]:
NOTE:

- ~flymd~ looks to be broken and unmaintained. Use ~impatient-mode~ for live
  previews.
- ~M-x markdown-preview~, requires: ~markdown~, to be installed with system
  package manager.

Look at:

- http://fletcher.github.io/peg-multimarkdown/.
#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/KeyboardMacros
  ;; https://www.emacswiki.org/emacs/KeyboardMacrosTricks
  (fset 'convert-markdown-ref-to-list
        "\C-[xreplace-regexp\C-m\\[\\(.*\\)\\].*\C-m* [\\1].\C-m")
  (fset 'convert-markdown-github-url-to-ref
        "\C-[xreplace-regexp\C-m.*github.com/\\(.*\\)/\\(.*\\)\C-m[Github: \\1/\\2]: https://github.com/\\1/\\2\C-m")
  ;; FIXME: figure out how to feed the `LFD` or `C-qC-j` without it
  ;; counting as a real `RET` and breaking the `replace-regexp` with:
  ;; `\\(` !!
  (defalias 'strip-a-ids-from-org-markdown-export
    (kmacro "M-< M-x r e p l a c e - r e g e x p RET \\ ( < a SPC i d = .* > < / a > \\ ) RET RET"))

  (use-package markdown-mode
    ;; ~markdown~ in arch package manager.
    ;; :ensure-system-package (markdown)  ;; Required by ~M-x markdown-preview~.
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    ;; multimarkdown is in brew/yay, but not pulling down on arch??
    ;; :init (setq markdown-command "multimarkdown")
    :bind (
           ("C-c C-a b" . convert-markdown-ref-to-list)
           ("C-c C-a g" . convert-markdown-github-url-to-ref)
           ("C-c C-a s" . strip-a-ids-from-org-markdown-export)
           )
    :hook ((markdown-mode . my-text-mode-config))
    )
#+END_SRC
*** [[https://github.com/skeeto/impatient-mode][impatient-mode]]:
~impatient-mode~ is a way of doing live previews of the current buffer in a web
browser.

#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
    ; start webserver with: `M-x httpd-start`.
    ; Then set the mode on the buffer: `M-x impatient-mode`.
    :ensure t
    :defer t
    )
#+END_SRC
*** my-markdown-preview:
~http-start~ doesn't blow up when port is in use, so this ends up
sending the impatient-mode generated URL to whatever service is already
running on the default port of 8080.

See: https://blog.bitsandbobs.net/blog/emacs-markdown-live-preview/

#+BEGIN_SRC emacs-lisp
  (defun my-markdown-filter (buffer)
    "Function to allow `impatient-mode` to preview markdown.  Usage:

  ,* `M-x httpd-start`
  ,* Go to required BUFFER.
  ,* `M-x impatient-mode`
  ,* `M-x imp-set-user-filter RET markdown-html RET`"
    (princ
     (with-temp-buffer
       (let ((tmp (buffer-name)))
         (set-buffer buffer)
         (set-buffer (markdown tmp))
         (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\"/>
  <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
     (current-buffer)))


  (defun my-markdown-preview ()
    "Preview markdown."
    (interactive)
    (unless (process-status "httpd")
      (setq httpd-port 8088)
      (httpd-start))
    (impatient-mode)
    (imp-set-user-filter 'my-markdown-filter)
    (imp-visit-buffer))
#+END_SRC
*** html-to-markdown:
#+BEGIN_SRC emacs-lisp
  (use-package html-to-markdown
    ;; Convert html code to markdown.
    :ensure t
    :defer t)
#+END_SRC
*** markdown-toc:
#+BEGIN_SRC emacs-lisp
  (use-package markdown-toc
    ;; https://github.com/ardumont/markdown-toc
    ;; Used to generate a table of contents in a markdown file.
    :ensure t
    :defer t)
#+END_SRC
** python:

Historical Links:

- http://www.emacswiki.org/emacs/ProgrammingWithPythonDotEl.
- https://github.com/fgallina/python.el.
- http://www.saltycrane.com/blog/2010/05/my-emacs-python-environment/.

*** python (~python-mode~):
NOTE: This still requires running: ~M-x eglot~ and then picking the python LSP
server (suggest: =pyright-langserver=).

#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure-system-package ((python) (pyright))
    :after eglot
    :ensure t
    :functions flycheck-mode
    :preface
    (defun cas/python-config ()
        "Python additional config."
        (if (not (string-match "python" compile-command))
            (set (make-local-variable 'compile-command)
                 "pytest"))
        )
    :hook (
           (python-ts-mode . cas/python-config)
           )
    :config
    (setq
     ;; See: https://github.com/renzmann/treesit-auto#keep-track-of-your-hooks
     python-ts-mode-hook python-mode-hook
     )
    )
#+END_SRC
*** Linters:
**** [[https://github.com/pythonic-emacs/blacken][blacken]]:
Uses [[https://github.com/psf/black][Github: psf/black]] to reformat python buffer on save.

#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :ensure t
    :hook (python-mode . blacken-mode)
    ;; :init
    ;; NOTE: Commented out below line due to currently working on projects that
    ;; require `black` but have no: `[tool.black]` in the `pyproject.toml` file.
    ;; (setq blacken-only-if-project-is-blackened t)
    )
#+END_SRC
**** [[https://github.com/pythonic-emacs/isortify][isortify]]:
Calls [[https://pycqa.github.io/isort/][isort]] to sort imports.

TODO: figure out why this is cause code to be eaten from the top of the file on
save.
#+BEGIN_SRC emacs-lisp
  ;; (use-package isortify
  ;;   :ensure t
  ;;   :defer t
  ;;   :after (python-mode)
  ;;   :hook (python-mode . isortify-mode)
  ;;   )
#+END_SRC
*** Package Management:
**** conda:
#+BEGIN_SRC emacs-lisp
  ;; FIXME: auto activation blows up when a file has no conda env associated to it.
  ;;
  (when (eq system-type 'darwin)
    ;; FIXME: Bound this to my Work laptop only and not break my personal linux
    ;; laptop when I don't touch conda.
    (use-package conda
      :after (python-mode)
      :ensure t
      :defer t
      :config
      ;; https://github.com/necaris/conda.el/issues/107 - stopped working with
      ;;conda 4.13.0
      ;;
      ;; Brew location for `miniforge`.
      ;; TODO: bound to `darwin`.
      ;; TODO: check all available paths to see which exists or look into ENV variables ??
      (setq conda-anaconda-home (expand-file-name "/opt/homebrew/Caskroom/miniforge/base/"))
      (setq conda-env-home-directory (expand-file-name "/opt/homebrew/Caskroom/miniforge/base/"))
      ;; ;; Web install location for `miniconda`.
      ;; (setq conda-anaconda-home (expand-file-name "~/opt/miniconda3/"))
      ;; (setq conda-env-home-directory (expand-file-name "~/opt/miniconda3/"))
      ;; if you want interactive shell support, include:
      (conda-env-initialize-interactive-shells)
      ;; if you want eshell support, include:
      ;;  (conda-env-initialize-eshell)
      ;;  (defun conda-autoload ()
      ;;    (interactive)
      ;;    "auto activate conda if environment.yml exists."
      ;;    (f-traverse-upwards (lambda (path)
      ;;                          (let ((venv-path (f-expand "environment.yml" path)))
      ;;                            (when (f-exists? venv-path)
      ;;                              (conda-env-activate-for-buffer)
      ;;                              )))))
      ;; NOTE: Using above function to load env for each buffer, instead of the
      ;; global mode, since the global setting below doesn't gracefully handle
      ;; buffers that don't have a conda env.
      ;;
      ;; ;; if you want auto-activation (see below for details), include:
      ;; (conda-env-autoactivate-mode t)
      ;; ;; if you want to automatically activate a conda environment on the opening of a file:
      ;; (add-to-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
      ;;                                           (conda-env-activate-for-buffer))))
      ;; modeline
      ;; (setq-default mode-line-format (cons '(:exec conda-env-current-name) mode-line-format))
      ;; :hook (
      ;;        (python-mode . conda-autoload)
      ;;        )
    )
  )

#+END_SRC

**** [[https://github.com/galaunay/poetry.el][poetry]]:
FIXME: removing since current work is poetry in a conda env. Advice is to just
use conda to manage the venv loading, since poetry is looking in the wrong
location.

#+BEGIN_SRC emacs-lisp
  (use-package poetry
    :ensure t
    :defer t
    :after (python-mode)
    ;; :config
    ;; (poetry-tracking-mode)  ;; activate poetry virtualenv's on buffer change.
    )
#+END_SRC
*** Virtual Env Management:
**** [[https://github.com/pwalsh/pipenv.el][pipenv]]:
The replacement to ~virtualenv~. Do ~C-cC-pa~ or ~M-x pipenv-activate~ to start
a projects pipenv.

#+BEGIN_SRC emacs-lisp
  ;; (use-package pipenv
  ;;   :ensure t
  ;;   :defer t
  ;;   :after (python-mode)
  ;;   :hook (python-mode . pipenv-mode)
  ;;   :init
  ;;   (setq
  ;;    pipenv-projectile-after-switch-function
  ;;    #'pipenv-projectile-after-switch-default))
#+END_SRC

**** pyvenv:
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :defer t
    :after (python-mode)
    :functions pyvenv-autoload
    :config
    (defun pyvenv-autoload ()
      "auto activate venv directory if exists. See: https://github.com/jorgenschaefer/pyvenv/issues/51"
      (interactive)
      (f-traverse-upwards (lambda (path)
                            (let ((venv-path (f-expand ".venv" path)))
                              (when (f-exists? venv-path)
                                (pyvenv-activate venv-path)
                                )))))
    :hook (
           (python-mode . pyvenv-autoload)
           ;; Modified from: https://github.com/jorgenschaefer/pyvenv/issues/95
           ;; FIXME: correct this so it runs LSP after above call, so I don't
           ;; need to do: C-xC-v.
           ;; (pyvenv-post-activate-hooks . lsp)
           )
    )
#+END_SRC
** sql:
- Linter: [[https://github.com/sqlfluff/sqlfluff][Github: sqlfluff/sqlfluff]]

#+BEGIN_SRC emacs-lisp
  (use-package sql
    :ensure-system-package (sqlfluff)
    :ensure t
    :config
    (setq
     sql-dialect 'postgres
     sql-linter-program 'sqlfluff
     )
    )
#+END_SRC
*** [[https://github.com/erickgnavar/flymake-sqlfluff][flymake-sqlfluff]]:
Testing out SQLFluff for linting.
#+BEGIN_SRC emacs-lisp
  (use-package flymake-sqlfluff
    :ensure-system-package (sqlfluff)
    :ensure t)
#+END_SRC
** xml:
*** Pretty print XML:
- [[https://stackoverflow.com/questions/12492/pretty-printing-xml-files-on-emacs][SO: Pretty Printing XML files on Emacs]]. Picked the solution below so that I
  did not have to pull in an OS package.
#+BEGIN_SRC emacs-lisp
  (defun bf-pretty-print-xml-region (begin end)
    "Pretty format XML markup in region. You need to have nxml-mode
  http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
  this.  The function inserts linebreaks to separate tags that have
  nothing but whitespace between them.  It then indents the markup
  by using nxml's indentation rules."
    (interactive "r")
    (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n") (setq end (1+ end)))
      (indent-region begin end))
    (message "Ah, much better!"))
#+END_SRC
Usage:
- Past XML into an ~nxml-mode~ buffer.
- To expand single-line XML: Select region or jump to start and call:
  ~bf-pretty-print-xml-region~.
- To indent multi-line XML: Select region and call: ~indent-region~.

** yaml:
Use ~:ensure-system-package~ to install the: [[https://github.com/redhat-developer/yaml-language-server][Github:
redhat-developer/yaml-language-server]] for eglot to use. *NOTE:* Look at the
github page to configure schemas for the YAML file (eg. Kubernetes schema) to
do completions!

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure-system-package (yaml-language-server)
    :ensure t
    )
#+END_SRC
*** yaml schemas:
RedHat maintains a whole library of JSON schemas for it's [[https://github.com/redhat-developer/yaml-language-server][Github:
redhat-developer/yaml-language-server]] to use. These need to be pulled in
dynamically, so that emacs can appropriately warn/highlight/complete/document
the YAML in the current buffer.

Links:

- https://developers.redhat.com/blog/2020/11/25/how-to-configure-yaml-schema-to-make-editing-files-easier#yaml_schema.
- https://emacs-lsp.github.io/lsp-mode/page/lsp-yaml/.
- https://www.schemastore.org/json/.
- https://github.com/SchemaStore/schemastore/commit/12841f7f81401f2c48c3c1c647c9e0739a34a89b
  for DBT project files.
- [[https://github.com/joaotavora/eglot/discussions/918][Github: joaotavora/eglot/discussions/918 - Eglot + yaml-language-server #918]].

Hopefully, [[https://github.com/yveszoundi/eglot-yaml][Github: yveszoundi/eglot-yaml]] solves this problem for eglot.

**** [[https://github.com/yveszoundi/eglot-yaml][eglot-yaml]]:
~M-x eglot-yaml-schema-for-buffer~ to select a JSON schema for the current YAML
buffer.

*NOTE:* Not in emacs package managers! Commented out for now.
#+BEGIN_SRC emacs-lisp
  ;; (use-package eglot-yaml
  ;;   :ensure t
  ;;   :after (eglot)
  ;;   :hook ((yaml-ts-mode . eglot-yaml-init))
  ;;   )
#+END_SRC
* [[https://github.com/skeeto/elfeed][elfeed]]:
RSS feeds in emacs.
** [[https://github.com/skeeto/elfeed][elfeed]]:
An Emacs web feeds client.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :defer t
    :hook (
           (elfeed-show-mode . (lambda () (setq-local shr-width 80)))
           )
    :custom
    (elfeed-use-curl t)
    :config (setq-default word-wrap t)
    ;; (setq elfeed-log-level 'debug)
    )
#+END_SRC
** [[https://github.com/remyhonig/elfeed-org][elfeed-org]]:
Configure the Elfeed RSS reader with an Orgmode file.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-org
    :ensure t
    :defer t
    :config
    (setq
     rmh-elfeed-org-files (list "~/org/personal/elfeed.org")
     )
    :init (elfeed-org)
    )
#+END_SRC
** [[https://github.com/fasheng/elfeed-protocol/][elfeed-protocol]]:
#+BEGIN_SRC emacs-lisp
   (use-package elfeed-protocol
     :after (elfeed elfeed-org)
     :init
     (setq
      elfeed-protocol-update-unread-only t
      )
     (elfeed-protocol-enable)
     :ensure t
     :defer t)

  (defadvice elfeed (after configure-elfeed-feeds activate)
    "Make elfeed-org autotags rules work with elfeed-protocol."
    (setq elfeed-protocol-tags elfeed-feeds)
    ;; ~.authinfo.gpg~ contents: ~machine <ip/hostname> port <port> login <user> password <password>~.
    (setq elfeed-feeds (list
                        (list
                         "fever+http://craig@192.168.0.98:8095"
                         :api-url "http://craig@192.168.0.98:8095/api/fever.php"
                         :use-authinfo t
                         :autotags elfeed-protocol-tags
                         )))
    )
#+END_SRC
** [[https://github.com/karthink/elfeed-tube][elfeed-tube]]:
Youtube integration for Elfeed, the feed reader for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube
    :ensure t
    :defer t
    :after (elfeed)
    :demand t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
           ("F" . elfeed-tube-fetch)
           ([remap save-buffer] . elfeed-tube-save)))
#+END_SRC

If you want “live” captions and better MPV support:

#+BEGIN_SRC emacs-lisp
  (use-package elfeed-tube-mpv
    :ensure-system-package ((mpv) (yt-dlp))
    :ensure t
    :bind (:map elfeed-show-mode-map
                ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                ("C-c C-w" . elfeed-tube-mpv-where)
                ("v" . elfeed-tube-mpv)
                )
    )
#+END_SRC
** [[https://github.com/manojm321/elfeed-dashboard][elfeed-dashboard]]:
A frontend for elfeed (like Mu4e Dashboard).
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-dashboard
    :ensure t
    :defer t
    :config
    (setq elfeed-dashboard-file "~/org/personal/elfeed-dashboard.org")
    ;; update feed counts on elfeed-quit
    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
#+END_SRC
** [[https://github.com/SqrtMinusOne/elfeed-summary][elfeed-summary]]:
Alternative to [[*\[\[https://github.com/manojm321/elfeed-dashboard\]\[elfeed-dashboard\]\]:][elfeed-dashboard]].
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-summary
    :ensure t
    :defer t)
#+END_SRC
# ** [[https://github.com/jeetelongname/elfeed-goodies][elfeed-goodies]]:
# FIXME: Raise bug around missing Powerline version in melpa.
# #+BEGIN_SRC emacs-lisp
#   (use-package elfeed-goodies
#     :ensure t
#     :defer t
#     :init (elfeed-goodies/setup)
#     :config
#     ;; Fix: Pane splits vertically instead of horizontally.
#     ;; https://github.com/jeetelongname/elfeed-goodies/issues/40
#     ;;(setq elfeed-show-entry-switch 'pop-to-buffer)
#     )
# #+END_SRC
# ** [[https://github.com/paulelms/elfeed-autotag][elfeed-autotag]]:
# Easy auto-tagging for elfeed-protocol (and elfeed in general).
# #+BEGIN_SRC emacs-lisp
#   (use-package elfeed-autotag
#     :ensure t
#     :defer t
#     :config
#     (setq elfeed-autotag-files '("~/org/personal/elfeed.org"))
#     (elfeed-autotag)
#     )
# #+END_SRC
** TODO Future elfeed packages to pull in:
- https://sr.ht/~johnhamelink/elfeed-paywall/,
  https://www.reddit.com/r/emacs/comments/6r07ea/is_elfeed_able_to_extract_full_text_from_articles/ -
  Avoid paywalls and retrieve content from a feed entry's link.
- https://github.com/zabe40/elfeed-time - elfeed-time displays the approximate
  time it will take to read, watch, or listen to an elfeed entry. It can
  display this information in both elfeed-search-mode, and elfeed-show-mode.
- https://github.com/yt-dlp/yt-dlp,
  https://github.com/cvzi/mpv-youtube-upnext/issues/8 - log into YouTube via
  either: ~.netrc~, or: ~--cookies~ pulled from the browser and stored in a
  file set in the ~yt-dlp~ config file.
- https://cundy.me/post/elfeed/ - Customized
  ~elfeed-search-print-entry-function~ to put more useful information on the
  ~elfeed-search~ buffer. eg. like ~elfeed-time~ (youtube duration, date).
- Fix ~elfeed-org~ tags on FreshRSS sourced feeds.
- https://gist.github.com/alphapapa/80d2dba33fafcb50f558464a3a73af9a - anything
  worth stealing from Alphapapa's config?
- https://noonker.github.io/posts/2020-04-22-elfeed/ - any inspiration?
- https://punchagan.muse-amuse.in/blog/elfeed-hook-to-fetch-full-content/ -
  Fetch full content of a page.
- https://bitbucket.org/shackra/4hoa/src/master/ - A Go application that will
  burn your feeds and retrieve articles of the Internet for you to read in eww
  (or any other non-graphical web browser).
* Music:
** [[https://github.com/pft/mingus][mingus]]:
Mingus (MPD client)

MPD references:

- https://github.com/dakrone/eos/blob/master/eos-music.org
- https://wiki.archlinux.org/index.php/Music_Player_Daemon
- https://wiki.archlinux.org/index.php/Ncmpcpp

#+BEGIN_SRC emacs-lisp
  (use-package mingus
    :ensure t
    :defer t
    :bind
    (
     ("C-c m" . mingus)
     ("<f9>" . mingus-toggle)
     ("C-<f12>" . mingus-prev)
     ("<f12>" . mingus-next)
     ; "C-<f2>
     ("M-[ 1 ; 5 q" . mingus-vol-down)
     ; "C-<f3>
     ("M-[ 1 ; 5 r" . mingus-vol-up)
     )
    )
#+END_SRC
* Reading:
Packages around reading (eg. novels/epubs, Speed Reading, etc).
** [[https://github.com/smythp/eloud][eloud]]:
Emacs-based screen reader to read words when passing over them, or the whole
buffer with ~M-<~ (=beginning-of-buffer=). Toggle with: ~M-x eloud-mode~.

*NOTE:*
- This slows down buffer movement greatly.
- Throws traceback when trying to close with a FIDO fuzzy completion. Have to
  type out: ~eloud-mode<return>~, in: ~M-x~, to disable.
  - See: [[https://github.com/smythp/eloud/issues/33][Cannot disable eloud-mode from a fido completion #33]].
- [[https://espeak.sourceforge.net/commands.html][Espeak Docs: Commnands]].

#+BEGIN_SRC emacs-lisp
  (use-package eloud
    :ensure t
    :ensure-system-package (espeak)
    :config
    (if (eq system-type 'darwin)
        (setq eloud-espeak-path "/usr/local/bin/espeak"))
    (setq eloud-speech-rate 350)
    )
#+END_SRC

** [[https://github.com/emacsmirror/spray][spray]]:
Speed reading in a buffer by flashing each word in turn. Spritz clone for speed
reading.

#+BEGIN_SRC emacs-lisp
  (use-package spray
    :ensure t
    :defer t)
#+END_SRC

*** Commands
In ~spray-mode~ buffers, following commands are available:

- ~spray-start/stop~ (~SPC~) pause or resume spraying.
- ~spray-backward-word~ (~h, <left>~) pause and back to the last word.
- ~spray-forward-word~ (~l, <right>~) inverse of spray-backward-word.
- ~spray-faster~ (~f~) increases speed.
- ~spray-slower~ (~s~) decreases speed.
- ~spray-quit~ (~q, <return>~) quit ~spray-mode~.

* Terminals:
** eshell:
Add the following programs to the list of programs that =eshell= won't complain
about not being a proper terminal. This will move out of line-mode and into
paging mode (eg. like scrolling through a man page on a real terminal). See:

- [[https://emacs.stackexchange.com/questions/37910/fix-or-workaround-terminal-is-not-fully-functional][Emacs StackExchange: fix or workaround: "Terminal is not fully functional"]].
- [[https://www.emacswiki.org/emacs/EshellVisualCommands][Emacs Wiki: Eshell Visual Commands]].

*NOTE:* This will use =ansi-term= for those command calls, so can use:
 =C-xC-j=, and: =C-cC-k=, to jump in and out of editing mode.

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure t
    :config
    (setq eshell-history-size 1000000)
    (with-eval-after-load 'em-term
      (add-to-list 'eshell-visual-commands "aws"))
    )
#+END_SRC
** vterm:
Vterm is a terminal with pretty good ncurses support and compliance.

*NOTES:* Requires ~cmake~ installed on the system to compile!!

- =C-cC-t= to enter/exit copy-mode.

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :if (not (eq system-type 'windows-nt))  ;; FIXME: compiling on Windows.
    :ensure-system-package (cmake)
    :ensure t
    :after (cmake-mode)
    :init (setq vterm-always-compile-module t)
    :config (setq vterm-max-scrollback 100000)
    )
#+END_SRC
* Unsorted:
** [[https://github.com/abo-abo/hydra][hydra]]:
Create visual menu's like what `magit` provides, but easily
customised.

#+BEGIN_SRC emacs-lisp
  (use-package hydra :ensure t)
#+END_SRC
* Web:
** [[https://github.com/pashky/restclient.el][restclient]]:
Run up a rest client in emacs to quickly test APIs. See:

- http://emacsrocks.com/e15.html
- [[https://emacsconf.org/2021/talks/tech/][EmacsConf 2021: Creating technical API documentation and presentations using org-babel, restclient, and org-treeslide]].
- [[https://github.com/jypma/emacsconf2021/blob/master/presentation.org][Github: jypma/emacsconf2021/blob/master/presentation.org]].

Eg. Run (~C-cC-c~) the following in an empty buffer with restclient-mode on:
#+BEGIN_EXAMPLE restclient
  GET https://api.github.com
  User-Agent: Emacs Restclient
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :defer t
    :mode ("\\.restclient\\'" . restclient-mode)
    )
#+END_SRC
** [[;; From https://github.com/alf/ob-restclient.el][ob-restclient]]:
Add =restclient= support to org-babel code blocks.

Eg. Run (~C-cC-c~) the following code block.
#+BEGIN_SRC restclient :results silent
  GET https://api.github.com
  User-Agent: Emacs Restclient
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-restclient
    :ensure t
    :after (restclient)
    :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t)))
    )
#+END_SRC
* Links:
** Configs:
Configs that look good enough to go back and maybe learn/steal from:
- https://github.com/meatcar/emacs.d
- https://github.com/jakebox/jake-emacs
- https://github.com/jypma/emacs.d
** Packages to try:
- https://github.com/seagle0128/doom-modeline
- https://github.com/emacsorphanage/anzu
